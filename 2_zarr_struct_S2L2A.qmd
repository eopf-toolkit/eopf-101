---
title: "Deep dive into the Zarr format: Inside Zarr"
format: html
jupyter: python3
---
::: {.justify}

# Introduction

This tutorial introduces the structure of a Zarr sample for **Sentinel 2 L2A** data. We will demonstrate how to visualise the `zarr` encoding structure, explore embedded information, and retrieve metadata for further processing.

## Prerequisites
A sample dataset for this tutorial can be obtained from the [EOPF available Samples](https://common.s3.sbg.perf.cloud.ovh.net/product.html). If further data sets want to be explored, the code indicates where.

For local **Sentinel 2 L2A** data exploration, the resource with the format `S02MSIL2A_....zarr` should be located and downloaded in the ame directory as this example.

::: {.callout-note}
Further sample descriptions will be included in subsequent notebook updates.
:::

To manage the indicated libraries, it is recommended to work within a dedicated and stable set up. To ensure package compatibility and avoid conflicts, the following virtual environment setup is suggested:

For Conda:

`conda create --name zarr_explore python=3.11 os xarray zarr numpy jupyter`

For pip:

`pip install os xarray zarr numpy jupyter`

## Setting up the environment

The `xarray` library facilitates the handling of labeled multi-dimensional arrays, enabling more efficient processing. This library will be explored in detail in [Chapter 3](), but its [documentation](https://docs.xarray.dev/en/stable/) provides additional resources.

We then import the specific dependencies.

```{python}
#| label: importing_dependencies

import os
import xarray as xr

```

From `xarray`, The `.open_datatree()` function enables access and decoding of a `DataTree` from a file-like object (in this case, the `.zarr` stored file), creating a tree node for each group within the file.

```{python}
#| label: opening_zarr

# Open the Zarr store with xarray as a DataTree
zarr_sample= xr.open_datatree(
    "S02MSIL2A_20230629T120347_0000_A064_TC64.zarr",  # Substitute with the downloaded sample of your interest
    engine="zarr", # storage format
    chunks={}, # allows to open the default chunking
)

```

To allow us retrieve the names for each of the stored groups inside `zarr`, the subsequent function definition allows us looping and retrieving the names to be visualised at each main node. 
This will allow general overview of the elements stored within them without the fine description.

```{python}
#| label: function
def print_gen_structure(node, indent=""):
    print(f"{indent}{node.name}")     #allows us access each node
    for child_name, child_node in node.children.items(): #loops inside the selected nodes to extract naming
        print_gen_structure(child_node, indent + "  ") # prints the name of the selected nodes
```

The following output displays the attributes, conditions, measurements, and quality information. Such structure was generaly defined in [Chapter 1]().
```{python}
#| label: simple_print
print("Zarr Sentinel 2 L2A Structure")
print_gen_structure(zarr_sample.root) 
print("-" * 30)
```

If we follow the tree stucture, we can see that it also displays complementary information such as the available resolutions and embedded data, corresponding to the diagram.

![Sentinel-2 L2A zarr structure](img/s2l2a_d.jpg){fig-align="center"}

To have a finer visualisation of the `zarr` element, `xarray` also allows us to access a representation of the entire data content within the `.zarr` object. This visualisation displays each group defined inside the `.zarr` file and its respective arrays, including detailed information such as general metadata, dimensions, chunking geometry, and chunk size.
```{python}
#| label: complete_print
# Open the Zarr store with xarray and print the detailed structure:
print("Dataset Structure:")
print(zarr_sample)
print("-" * 30)
```

If we are  looking forward to extract specific information from a group, `xarray`'s lables allows us to retrieve by group, the information we are interested in.
Lets say we are willing to visualise only the reflectance values inside this asset.
We need to remember then, that we have 3 available resolutions (10m, 20m and 60m), and by following the `measurements/reflectance` path inside the `zarr`, we can retrieve the `reflectance` group structure:

```{python}
#| label: reflectance
# Retrieving the reflectance groups:
zarr_sample["measurements/reflectance"]
```

Inside this element, we are able to visualise the three main groups (nodes of the parent node `reflectance`) as `r10`,`r20` and `r60`, under the **Group** dropdown.
If we revise further inside each of them we will find the chunks containing the arrays with the reflectance information.

Also, through `zarr_sample.attrs[]` we are able to visualise both the `stac_discovery` and `other_metadata`.
For the properties inside `stac_discovery` for example:
```{python}
#| label: attributes
# STAC metadata style:
zarr_sample.attrs["stac_discovery"]['properties']
```
And inside `other_metadata`, the information from a band, for example `b06`:

```{python}
#| label: attributes2
# Complementing metadata:
zarr_sample.attrs["other_metadata"]['band_description']['b06']
```

### Conclusion
This tutorial provides an initial understanding of the `zarr` structure for Sentinel 2 L2A data. 
By using the `xarray` library, one can effectively navigate and inspect the different components within the `zarr` format, including its metadata and array organisation. 
This foundation will help deeply undestand the subsequent data analysis and processing workflows intended in our series.

For a deeper description of the metadata structure, follow the [metadata structure]() tutorial.

:::