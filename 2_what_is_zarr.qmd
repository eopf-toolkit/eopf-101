---
title: "Overview of the EOPF Zarr format"
format: html
---
::: {.justify}

### What Is Zarr?

**Zarr** is an open-source, cloud-native protocol for storing multi-dimensional arrays. It is specifically desgined to work well with cloud storage and larger-scale computing systems and can be seen as a cloud-native alternative to older formats like HDF5 or NetCDF.

Key advantage to traditional formats is that the Zarr specification stores large multi-dimensional arrays in **chunks**, which are smaller pieces of the larger array. Chunks can be accessed individually or multiple chunks can be read and written in parallel, making data access highly **efficient**.

Zarr works across different storage systems, including local file systems, cloud object storage as well as distributed file systems; offering a greater **flexibility** compared to traditional file formats.

In addition, Zarr embeds **metadata** directly alongside the data. This makes Zarr **self-descriptive**, as each data array contains descriptive information about itself, such as data type, dimensions or additional attributes.

::: {.callout-note}
Pro tip: Learn more about Zarr in the official [Zarr Documentation](https://zarr.dev/) and the [Zarr V3 storage specification](https://zarr-specs.readthedocs.io/en/latest/v3/core/index.html)
:::

### Components of Zarr
Zarr is organised in a **human-readable**, **hierarchical** structure using simple JSON metadata files and is composed of `groups and stores`, `chunks` and `metadata`:

#### Groups and Stores
**Groups** and **stores** are concepts that allow Zarr to differentiate between (i) where the data is stored (**stores**) and (ii) how it is organised (**groups**). A **group** is a container for logically organising the data, similar to folders in a file system. A **store** defines where the data is stored; it can be e.g. a bucket in the cloud or a directory on a disk.

#### Chunks
Zarr divides arrays into smaller, independent pieces (**chunks**). Through chunking it is possible to retrieve and process specific areas without loading the complete dataset. Its organisation into chunks is the main reason Zarr's high performance. Chunks are saved as binary files inside a `/c` directory and are further organised through nested folder paths based on their index, e.g. `c/0/0/0` for the chunk position `[0,0.0]`.

#### Metadata
Zarr uses descriptive **metadata** to describe the individual arrays but also the full hierarchy of the dataset. Metadata are stored in `zarr.json` files and are available on the array, group and store level. This structured metadata approach makes Zarr datasets **self-descriptive** and easy to navigate.

The graphic below shows an overview of all relevant Zarr components.

![Zarr conceptual structure](img/zarr_str.png){fig-align="center"}

### Zarr EOPF Format Structure
The ESA Copernicus Earth Observation Processor Framework defines `.zarr` as the encoding format for the EOPF catalogue. The Zarr encoding is well aligned with ESA's objective of enhancing the accessibility of Sentinel Data by modernising the previous `.SAFE` encoding into a flexible, cloud-native structure. The cloud-native nature of `zarr` is expected to broaden the applications of the Sentinel data within the geospatial community while maintaining data quality and established algorithms.

EOPF Zarr products contain of four main groups:

| Group | Contents |
|-------|----------|
| **Attributes** | STAC format metadata for the `.zarr` element |
| **Measurements** | Main retrieved variables |
| **Conditions** | Measurement context (geometric angles, meteorological/instrumental data) |
| **Quality** | Flags and quality information for measurement filtering |

Let us imagine a Sentinel-2 L2A tile. The tile has dimensions of approximately 10,980 by 10,980 pixels, and include 12 spectral bands (B01 to B12, excluding B10) at different resolutions, plus additional data arrays like a Scene Classification Map (SCL) and an Atmospheric Optical Thickness (AOT) array.<br>

For an efficient handling, the data could be divided into several 1024 by 1024-pixel chunks.

Following the defined EOPF Zarr product structure, a Sentinel-2 L2A `.zarr` file can be organised as follows:

- The processing history and chunking metadata for each of the groups will be stored under `attributes`
- The r10, r20 and r60 arrays for each band will be stored under `measurements`.

![Overview of EOPF Zarr product structure on the example of Sentinel-2 L2A](img/s2l2a.jpg){fig-align="center"}

This EOPF Zarr organisation for Sentinel-2 L2A data allows for efficient access to individual bands or specific spatial regions without loading the entire dataset, making it ideal for large-scale geospatial analysis. It also ensures all relevant metadata is co-located with the data it describes, enhancing data discoverability and usability.

::: {.callout-note}
Zarr Deep Dive: Dive deeper into the benefits of Zarr in a blogpost by Lindsey Nield from the Earthmover team: [Fundamentals: What is Zarr? A Cloud-Native Format for Tensor Data](https://earthmover.io/blog/what-is-zarr).
:::

### What's next?