---
title: "Introduction to STAC"
format: html
code-block-background: true
---

### Introduction

In this page, we will introduce you to the The **S**patio-**T**emporal **A**sset **C**atalog (STAC).<br>
We will explain its fundamental principles and, most importantly, we will explore its crucial structure and core components. <br>
Understanding the architecture of STAC is key to unlocking its potential for streamlined geospatial data management and interoperability.

### What we will learn

- üîç What STAC is and why it's important?
- üå≥ Identify the STAC environment
- ü™úüìä Understand the main components of STAC

<hr>

## Foundation

The **S**patio-**T**emporal **A**sset **C**atalog (STAC) is a standardised way to catalog and describe geospatial (raster) data. STAC makes it easier to discover, access, and work with geospatial data, in particular satellite data, as it provides a **common language for describing spatial and temporal characteristics** of the data.<br>
This common language improves interoperability between different data providers and software tools.

The main goal of [STAC](https://stacspec.org/en/) is to allow data providers share their data easily, making it universal for users to understand the where, when, how, and what of the collected data.

STAC uses **JSON** (JavaScript Object Notion) to structure the metadata of geo-referenced datasets. JSON makes it machine-readable. Through it is design, STAC is simple and extensible in its design as it is based on a network of JSON files.

STAC has evolved into a well-recognised community standard. The key benefit supporting its wide adoption is that one can use the same code and API to access data from different data repositories.

## The STAC ecosystem

The STAC standard offers various resources and tools for accessing, managing, and building catalogs that follow the STAC standard. These include:

| Category      | Tool/Plugin     | Description                                                                                                                                                                                            | Language   |
| :------------ | :-------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :--------- |
| **STAC Tools** | [STAC Browser](https://github.com/radiantearth/stac-browser) | A user-friendly web interface for visually exploring and interacting with various STAC catalogs.                                                                                                       | Web interface |
|               | [STAC Server](https://github.com/stac-utils/stac-server)   | A reference implementation for serving STAC catalogs and collections.                                                                                                                                  | Python     |
| **STAC Plug-ins** | [STAC Validator](https://github.com/stac-utils/stac-validator) | A tool for programmatically validating STAC Catalogs, Collections, and Items to ensure compliance with the STAC specification.                                                                           | Python     |
|               | [PySTAC](https://github.com/stac-utils/pystac)           | A Python library for reading, writing, and validating STAC objects, facilitating the creation and manipulation of STAC data.                                                                             | Python     |
|               | [pystac-client](https://pystac-client.readthedocs.io/en/stable/) | A Python library that provides a convenient and powerful interface for searching and accessing STAC data from STAC API servers.                                                                       | Python     |
|               | [rstac](https://github.com/brazil-data-cube/rstac)       | An R package that provides functionalities for interacting with STAC APIs and working with STAC objects within the R environment.                                                                        | R          |
|               | [STAC.jl](https://github.com/JuliaClimate/STAC.jl)       | A Julia package designed for working with STAC, enabling users to interact with STAC catalogs and process geospatial data.                                                                             | Julia      |
|               | [STACCube.jl](https://github.com/felixcremer/STACCube.jl) | A Julia package that facilitates the creation and management of STAC-compliant data cubes from various geospatial datasets.                                                                            | Julia      |

## STAC components
The STAC components are related to each other as containers.

A STAC can be defined as a group of links that lead to Items, smaller Catalogs, and Collections. Items are always composed of Assets. A Collection can be viewed as a group of Catalogs, with additional information that provides deeper insight into the contained data.

There are four main components of STAC: (i) Catalog, (ii) Collection, (iii) Item and (iv) Asset. 

![STAC structure](img/stac_example.png){fig-align="center"}

#### Catalog
A catalog serves as the initial entry point in a STAC. Within a Catalog, a `.json` file provides links to further Collections or Items contained within that Catalog.
When searching for specific data, such as all the observations from a particular instrument or mission, it is usually best to start with STAC collections.

#### Collection
It expand upon the parent Catalog's metadata. They allow the identification of the **Items** it contains, addressing their spatial and temporal extent. They also group items based on their origin or topic <br>
Also, information such as licenses, keywords, and data providers further specify details that allow the particular Items search. <br>

::: {.callout-note}
Although a catalog can sometimes serve as a collection, its primary role is to organise and structure data within the overall STAC hierarchy. Collections, on the other hand, are designed to provide a more detailed grouping of related data assets with additional descriptions.

Recognising this distinction is essential for effectively navigating the STAC ecosystem, particularly since the terms **catalog** and **collection** are sometimes used interchangeably in this field.
:::

#### Item
An item is the fundamental element of STAC. It is a `.GeoJSON` feature supplemented with additional metadata, enabling browsing through catalogs. This allows it to be easily read by any modern Geographic Information System (GIS) or geospatial library.

![Item entity](img/item_inf.png){fig-align="center"}

#### Asset
A **Spatio-Temporal Asset** is the smallest element inside a STAC. This element represents specific geographic information at a specific place and time.<br>
At this level, the GeoJSON does not contain the actual information itself; rather, it provides references to these files, functioning similarly to an index for each of the STAC Assets.

## STAC analogy: Drinks menu

To better understand how the elements are nested within a STAC, imagine a **Drinks** menu as a STAC. <br>
This catalog is the top-level entry point, presenting the overall selection of beverages available.<br>

Within this Drinks **catalog**, we find major sections or categories. These sections represent **collections** in STAC. <br>
For our analogy, let's say the menu is divided into two main collections:

- **Caffeinated Drinks Collection**: This section groups all beverages that contain caffeine.<br>
- **Non-Caffeinated Drinks Collection**: This section groups all beverages that do not contain caffeine.<br>

Each of these collections contains specific drinks, which can then be grouped into **items**.<br>
For our distinction, like a group of drinks, we define:

- Black Tea
- Juice 
- Milk

Each item will have its description, ingredients or type. This example has a similar structure to a STAC with metadata inside, like the date and time of observation, and the geographic area it covers.

Finally, at the most granular level, each Item is made up of Assets. These are the individual components or files that constitute the Item. For example:

For the **Milk item** (found in the Non-Caffeinated Drinks Collection), its Assets might include:

- Oat Milk
- Regular Milk

Also, an **Juice item** with:

- Apple Juice
- Orange Juice

This structure allows us to easily navigate a vast amount of data, just as a well-organised menu helps a customer quickly find their desired drink.

![Menu as a STAC element](img/drinks_menu.png){fig-align="center"}


## Conclusion

As we have explored, the **Spatio-Temporal Asset Catalog** offers a strong and adaptable framework for geographic data organisation. Large volumes of spatio-temporal data may be effectively defined, indexed, and found thanks to STAC's hierarchical structure, which extends from the overall Catalog to individual Assets.

## What's next?

In the following chapters, we will explore how to access the [EOPF Sentinel Zarr Samples Service STAC API](https://stac.browser.user.eopf.eodc.eu/?.language=en), the STAC where the `zarr` samples for Sentinel 1, Sentinel 2 and Sentinel 3 are made available by ESA. <br>

We will also explore how to browse the data, download samples and access assets metadata through several programming languages and plugins.