[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ESA EOPF 101",
    "section": "",
    "text": "Your community guide for working with EOPF Sentinel Zarr data in the cloud\n\nExplore EOPF 101, an open community resource designed to help Sentinel data users explore EOPF Sentinel Zarr data in the cloud. With our step-by-step and hands-on tutorials, you’ll learn how to effectively use EOPF Sentinel Zarr products and build Earth Observation workflows that scale.\n\n🚀 Ready to explore EOPF 101?\n\nEOPF 101 is designed for Sentinel data users who are new to cloud-optimised geospatial formats and cloud-based workflows. It introduces you to fundamental cloud-native geospatial concepts, the Earth Observation Processing Framework (EOPF) activities by ESA, re-processed EOPF Sentinel Zarr data, as well as tools and libraries to work with EOPF Sentinel Zarr data in the cloud.\nAcross five chapters, EOPF 101 gradually introduces you to the EOPF Sentinel Zarr products, how you can search and access these, relevant tools and plugins to use EOPF Sentinel Zarr data in different working environments, as well as practical end-to-end application workflows highlighting the benefits of EOPF Sentinel Zarr data.\n\nChapter 1 - About EOPF\n\nIntroduction to the EOPF\nAbout Cloud-Optimised Formats\nEOPF Sentinel Zarr products\n\nChapter 2 - About EOPF Zarr\n\nOverview of the EOPF Zarr format\nDiscover EOPF Zarr - Sentinel-2 L2A\n\nChapter 3 - EOPF and STAC\n\nIntroduction to STAC\nExplore the web interface of the EOPF Zarr STAC Catalog\nAccess the EOPF Zarr STAC API with Python\nFrom STAC to Data: Accessing EOPF Zarr with xarray\n\n[COMING SOON] Chapter 4 - Tools to work with EOPF Zarr\n\nGet hands-on with different libraries and tools facilitating the use of EOPF Sentinel Zarr data\n\n[COMING SOON] Chapter 5 - EOPF Zarr in Action\n\nSee end-to-end workflows leveraging EOPF Sentinel Zarr data across different application domains\n\n\n\n💡 How best use EOPF 101\n\nYou can use EOPF 101 as a reference online resource to get example code and workflows for working with Zarr data, the EOPF STAC Catalogue, and different libraries and plugins facilitating the use of EOPF Sentinel Zarr data. Beyond this browsable version, you can also set up the required environment to execute the notebooks.\nInstructions on local setup and Docker container on CDSE are coming soon.\n\n\n📢 How to get involved\n\nEOPF 101 is an open community resource under active development. Our activities are designed to engage with Sentinel users and to gather feedback on EOPF Sentinel Zarr products. There are different ways you can get involved and engaged:\n\nJoin the EOPF Toolkit Notebook Competition\n\nGet ready and participate in the EOPF Toolkik Notebook Competition! The competition will kick off in October 2025 and run till January 2026. It is your chance to get hands-on with EOPF Zarr products, get expert input and guidance and show the community the great work you do.\nExpress your interest today and do not miss any updates related to the notebook competition.\n\nMore details coming soon.\n\nIdeas & Feedback?\n\nIs there a plugin or library missing that you would like to see integrated? Do you have feedback on EOPF 101? Please submit an issue and we will review your request.\n\nAbout the ESA EOPF Toolkit project\n\nEOPF 101 is a community resource developed as part of the EOPF Toolkit project funded by the European Space Agency. EOPF 101 is brought to you by Development Seed, thriveGEO and SparkGeo.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>**ESA EOPF 101**</span>"
    ]
  },
  {
    "objectID": "11_about_eopf.html",
    "href": "11_about_eopf.html",
    "title": "Introduction to the EOPF",
    "section": "",
    "text": "Introduction\nIn this chapter, we will introduce the European Space Agency’s (ESA) Earth Observation Processor Framework (EOPF) initiative. This project marks a significant step towards modernising how we handle satellite data, specifically by moving away from the traditional .SAFE data format to a more efficient, cloud-optimised format. We will take a closer look at the new structure ESA has developed for this purpose.",
    "crumbs": [
      "**About EOPF**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to the EOPF</span>"
    ]
  },
  {
    "objectID": "11_about_eopf.html#what-is-eopf",
    "href": "11_about_eopf.html#what-is-eopf",
    "title": "Introduction to the EOPF",
    "section": "What is EOPF?",
    "text": "What is EOPF?\nThe Earth Observation Processor Framework (EOPF) is an initiative led by the European Space Agency (ESA) designed to modernise and harmonise data from the Copernicus Sentinel Missions.\nWith the upcoming Copernicus Expansion missions in 2028, the amount of data produced daily will significantly increase. EOPF is ESA’s solution to organise Sentinel data in a way that works seamlessly with modern cloud technology. This will make it easier to find, access, and process the information you need. The new approach provides user-friendly access, simplifies maintenance, and helps keep costs down, guaranteeing reliable access to Sentinel data in the long run.\nThe Sentinel-1, Sentinel-2, and Sentinel-3 missions are the first to be updated with this new system.",
    "crumbs": [
      "**About EOPF**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to the EOPF</span>"
    ]
  },
  {
    "objectID": "11_about_eopf.html#the-eopf-data-model",
    "href": "11_about_eopf.html#the-eopf-data-model",
    "title": "Introduction to the EOPF",
    "section": "The EOPF Data Model",
    "text": "The EOPF Data Model\nThe EOPF data model has been defined by following a set of principles:\n\nOpen standards: Following common and community-approved data standards ensures sustainability and user uptake.\nInteroperability: Harmonised with a clear and organised structure that describes the data itself.\nCloud optimisation: Designed for efficient access and handling in cloud environments.\nConversion flexibility: Providing tools to adjust the data for different applications.\n\nUnder EOPF, there are four key areas of activities: (i) EOPF product structure, (ii) EOPF metadata structure, (iii) EOPF encoding structure and (iv) the EOPF Processor Framework:\n\nEOPF product structure\nAs part of the EOPF, ESA is actively working on a common data structure for Sentinel data products to define a common meta-model that can be used across all Sentinel and other EO missions. This approach ensures that data from several missions is consistent.\nThe EOPF product structure consists of the following components:\n\nMeasurements: The actual sensor readings (like how much light is reflected or the temperature), at different levels of detail.\nQuality indicators: Details that help understand how reliable the measurements are.\nConditions: Information about the environment or technical aspects when the data was collected.\nAttributes: Global metadata, such as when it was acquired and the sensor’s orbit.\n\n\n\n\nEOPF product structure\n\n\n\n\n\n\n\n\nNote\n\n\n\nLearn more about the EOPF Zarr product structure here.\n\n\n\n\nEOPF metadata structure\nMetadata provides all relevant information required to uniquely describe each Sentinel product. The EOPF metadata structure is organised as follows:\n\nDiscovery Metadata: Following the metadata structure defined by the SpatioTemporal Asset Catalogue (STAC), which helps to keep things consistent across different missions.\nProcessing History Metadata: Keeping a record of how the data has been processed.\nOther Metadata: Information like the status of the sensor and details about the satellite’s orbit.\n\n\n\n\n\n\n\nNote\n\n\n\nEOPF and STAC: Learn more about EOPF and STAC here.\n\n\n\n\nEOPF encoding structure\nAn encoding structure can be seen as the specific method used to package and store data and its associated metadata in a digital format. Building on the consistent data structure and clear metadata, the new storage system must be capable of handling various aspects of current Sentinel data (such as manifest files and tile structures from the SAFE format) while remaining fully compatible with cloud environments.\nESA chose .zarr as encoding format as it allows for instant access to data, efficient processing of massive amounts of data, and seamless integration with other datasets. The EOPF Sentinel Zarr data encoding allows you to work with data from multiple missions more effectively.\n\n\n\n\n\n\nNote\n\n\n\nLearn more about the EOPF Sentinel Zarr format here. And learn more about cloud-optimised geospatial data formats in general in the Cloud-Optimised Geospatial Data Formats Guide\n\n\n\n\nEOPF processor framework\nThe way Sentinel data is processed is being updated to take advantage of modern cloud computing. This will make the processing faster and more efficient, and at the same time ensure the scientific quality and accuracy of the Sentinel data remains the same.\n\n\n\n\n\n\nNote\n\n\n\nTo learn more about the EOPF processor framework, visit https://eopf.copernicus.eu/eopf/",
    "crumbs": [
      "**About EOPF**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to the EOPF</span>"
    ]
  },
  {
    "objectID": "11_about_eopf.html#conclusion",
    "href": "11_about_eopf.html#conclusion",
    "title": "Introduction to the EOPF",
    "section": "Conclusion",
    "text": "Conclusion\nThroughout this section, we explored the EOPF initiative and its adoption of the .zarrformat. This new approach is set to significantly improve and simplify how we access and work with data from the satellite missions Sentinel-1, Sentinel-2, and Sentinel-3.",
    "crumbs": [
      "**About EOPF**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to the EOPF</span>"
    ]
  },
  {
    "objectID": "11_about_eopf.html#whats-next",
    "href": "11_about_eopf.html#whats-next",
    "title": "Introduction to the EOPF",
    "section": "What’s next?",
    "text": "What’s next?\nIn the following [section] (./12_about_cloudoptimized_formats.qmd), we learn why EO data needs to be cloud-optimised when processed in the cloud.",
    "crumbs": [
      "**About EOPF**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to the EOPF</span>"
    ]
  },
  {
    "objectID": "12_about_cloudoptimized_formats.html",
    "href": "12_about_cloudoptimized_formats.html",
    "title": "About cloud-optimised formats",
    "section": "",
    "text": "Introduction\nIn this section, we will dive into cloud-optimised geospatial formats. We explore why these new formats are important and will introduce you to two common cloud-optimised data formats specifically for raster files.",
    "crumbs": [
      "**About EOPF**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>About cloud-optimised formats</span>"
    ]
  },
  {
    "objectID": "12_about_cloudoptimized_formats.html#why-to-cloud-optimise-geospatial-data-formats",
    "href": "12_about_cloudoptimized_formats.html#why-to-cloud-optimise-geospatial-data-formats",
    "title": "About cloud-optimised formats",
    "section": "Why to cloud-optimise geospatial data formats?",
    "text": "Why to cloud-optimise geospatial data formats?\nThe volume of EO data has grown exponentially in recent years. The Copernicus programme alone generates ~16TB daily from the Sentinel missions. Traditional file formats, like .SAFE (where each file can be hundreds of megabytes), are optimised for efficient archiving and distributing data. This means that we often download the data from an entire overpass, even if we only need to access a small part of it. For example, if we want to do an analysis of the area of a single city over a decade.\nWith growing data volumes, this becomes a challenge. To picture the different nature of challenges we come across, let us compare a traditional local workflow with a cloud-based workflow:\n\nTraditional local workflow: When working locally, we download much more data than we need, and we are constrained by the compute and storage capacity of the local system. However, an advantage of working locally is that data and compute are close together, meaning that there is not much delay in accessing the data.\nCloud-based workflow: Cloud environments overcome the limitations local workflows have. A cloud environment offers limitless storage and compute capacity. On the contrary, data storage, compute, and you the destination are far apart. There is an additional time for data to travel between the storage location, processing resources and us. This time is referred to as data latency.\n\n\n\n\n\n\n\nNote\n\n\n\nData latency refers to the time it takes for data to be transmitted or processed from cloud storage to your computer. In local workflows, data latency is minimal, whereas in cloud-based workflows, data latency needs to be optimised.\n\n\n\nAnalogy: Comparing local and cloud-based workflows with ordering a pizza\nTo understand the principal concept, let us compare local and cloud-based workflows with ordering a pizza. Local workflows are similar to placing an order at a pizza store on your street. It is quick since the ‘data’ (pizza) is easily accessible, but we can only choose from what the local pizza store offers.\nOn the other hand, cloud-based workflows are comparable to ordering a pizza from a pizza store in a different city or even country. This option allows you to order different types of pizzas, which are not available in the pizza store on your street. While we might have more options to choose from, the time between order and delivery can become a challenge. The time until your pizza from a different town or country arrives at your house is called data latency.\nHence, the overall goal with cloud-based workflows is to minimise data latency as much as possible. This is why traditional data formats need to be cloud-optimised.",
    "crumbs": [
      "**About EOPF**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>About cloud-optimised formats</span>"
    ]
  },
  {
    "objectID": "12_about_cloudoptimized_formats.html#characteristics-of-cloud-optimised-formats",
    "href": "12_about_cloudoptimized_formats.html#characteristics-of-cloud-optimised-formats",
    "title": "About cloud-optimised formats",
    "section": "Characteristics of cloud-optimised formats",
    "text": "Characteristics of cloud-optimised formats\nCloud-optimised formats are optimised to minimise data latency. By allowing for an efficient retrieval of smaller, specific chunks of information rather than downloading an entire file. Accessing a smaller data subset also reduces the costs associated with data transfer and data processing.\nCloud-optimised geospatial data formats have the following characteristics:\n\nData is accessible over an HTTP protocol.\nRead-Oriented, as it supports partial and parallel reads.\nData is organised in internal groupings (such as chunks, tiles, shards) for efficient subsetting, distributed processing and data access in memory.\nMetadata can be accessed in one read.\n\n\n\n\n\n\n\nNote\n\n\n\nWhen accessing data over the internet (e.g. through object stores in the cloud), latency is high compared to local storage, so it is recommended to fetch lots of data in fewer reads.",
    "crumbs": [
      "**About EOPF**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>About cloud-optimised formats</span>"
    ]
  },
  {
    "objectID": "12_about_cloudoptimized_formats.html#cloud-optimised-geospatial-raster-formats",
    "href": "12_about_cloudoptimized_formats.html#cloud-optimised-geospatial-raster-formats",
    "title": "About cloud-optimised formats",
    "section": "Cloud-Optimised Geospatial Raster Formats",
    "text": "Cloud-Optimised Geospatial Raster Formats\nFor satellite data, two main cloud-optimised formats are being used: - Cloud-Optimised GeoTIFF (COG): Optimised for 2D image data and originates from the traditional GeoTIFF format, and - Zarr: Used and designed for complex, n-dimensional data structures and originates from the traditional formats netCDF and HDF5.\n\nCloud-optimised GeoTIFF (COG)\nCOGs have been widely used as a cloud-native format for satellite imagery and improve the standard GeoTIFF format by: - Organising data into tiles: Dividing the data into smaller, manageable squares (like 512x512 pixels). - Including lower-resolution previews: Having pre-generated, less detailed versions of the data. This allows for fast and efficient data visualisations.\nA key feature of COGs is the Internal File Directory (IFD), which acts like an internal index. This allows for retrieving only the parts of the data needed using simple web requests. For example, it is possible to access just the tiles covering Paris from a large Sentinel-2 image of Europe.\n\n\n\nCOG structure. Retrieved from CNG documentation\n\n\n\n\nMulti-dimensional Array Storage with Zarr\nZarr is the cloud-optimised version for the traditional formats netCDF and HDF5, and is specifically designed for storing and accessing large n-dimensional arrays in the cloud by:\n\nChunking: Breaking large arrays into smaller pieces that can be accessed independently\nCompression: Each chunk can be compressed individually for efficient storage\nHierarchical Organisation: Arrays are organised in groups, similar to folders in a filesystem\nCloud-Native Access: Optimised for reading partial data over HTTP\nParallel I/O: Multiple chunks can be read or written simultaneously\nSelf-Description: Rich metadata is stored alongside the data using JSON\n\nThis makes Zarr particularly well-suited as a storage format for processing Earth observation data in the cloud.\n\n\n\nZarr’s hierarchical organization showing stores, groups, arrays, and chunks\n\n\n\n\nWhen to use COG versus Zarr?\nThe table below compares some features of COG and Zarr:\n\n\n\n\n\n\n\n\nFeature\nZarr\nCOG\n\n\n\n\nStructure\nMulti-file chunks\nSingle file\n\n\nAccess\nParallel\nSequential\n\n\nCompression\nDifferently per-chunk\nWhole-file\n\n\nScales\nMulti-scale in single file\nSeparate, pre-generated lower-resolution files\n\n\n\n Based on the structure and capabilities for each format, COGs are used when:\n\nYou work with two-dimensional raster data (like satellite images or elevation models)\nYou need to easily visualise or access specific geographic areas without loading the entire dataset.\nInteroperability with existing GIS software is important, as COG is a widely adopted standard.\n\nOn the other hand, Zarr is more often used when:\n\nYou deal with large, multi-dimensional datasets that might be updated or modified.\nYou are performing complex analyses that involve accessing different parts of the data in parallel.\nAn efficient handling of different resolutions or variables within a single dataset is required.\n\n\n\n\n\n\n\nNote\n\n\n\nZarr vs COG: Want to learn more about the differences and similarities of COG and Zarr? Then we recommend the following blog post by Julia Signell and Jarrett Keifer from Element84, where they discuss “Is Zarr the new COG?”",
    "crumbs": [
      "**About EOPF**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>About cloud-optimised formats</span>"
    ]
  },
  {
    "objectID": "12_about_cloudoptimized_formats.html#conclusion",
    "href": "12_about_cloudoptimized_formats.html#conclusion",
    "title": "About cloud-optimised formats",
    "section": "Conclusion",
    "text": "Conclusion\nIn this section, we explored the fundamental concepts of cloud-optimised geospatial formats. By understanding the core characteristics of these formats and by looking at specific examples like Zarr, you now have a solid foundation for appreciating how these innovations are making geospatial data more accessible, efficient, and powerful in the cloud.",
    "crumbs": [
      "**About EOPF**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>About cloud-optimised formats</span>"
    ]
  },
  {
    "objectID": "12_about_cloudoptimized_formats.html#whats-next",
    "href": "12_about_cloudoptimized_formats.html#whats-next",
    "title": "About cloud-optimised formats",
    "section": "What’s next?",
    "text": "What’s next?\nNow that we have an idea of the available cloud-optimised formats for satellite imagery and the reason why we need to optimise traditional formats for the cloud, in the next section, we will explore the EOPF data products that are being re-processed as part of the EOPF Zarr Sample Service.",
    "crumbs": [
      "**About EOPF**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>About cloud-optimised formats</span>"
    ]
  },
  {
    "objectID": "13_overview_eopf_datasets.html",
    "href": "13_overview_eopf_datasets.html",
    "title": "Overview of EOPF Zarr Products",
    "section": "",
    "text": "Introduction\nIn the previous section, we introduced the Earth Observation Processing Framework (EOPF) initiative and explored the advantages of cloud-optimised formats like Zarr. Now, it is time to discover which data products will be available and where you can access them.",
    "crumbs": [
      "**About EOPF**",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Overview of EOPF Zarr Products</span>"
    ]
  },
  {
    "objectID": "13_overview_eopf_datasets.html#available-eopf-zarr-products",
    "href": "13_overview_eopf_datasets.html#available-eopf-zarr-products",
    "title": "Overview of EOPF Zarr Products",
    "section": "Available EOPF Zarr products",
    "text": "Available EOPF Zarr products\nRe-engineered EOPF Zarr products are available for exploration via the EOPF Sentinel Zarr Sample Service STAC Catalog. Data from Sentinel-1, Sentinel-2 and Sentinel-3 missions are being reprocessed and made available.\n\n\n\n\n\n\nImportant\n\n\n\nThe re-processing from the Sentinel missions is an ongoing activity as part of the EOPF Sentinel Zarr Sample Service. This page and our tutorials will continuously be updated as soon as new data products are available.\n\n\nAn overview of the datasets that are being re-engineered for different processing levels is given below.\n\nSentinel-1\nSentinel-1 is a radar imaging mission that is composed of a constellation of two polar-orbiting satellites providing continuous all-weather, day and night imagery.\n\n\n\nProduct\nInstrument\nDescription\nAvailable at\n\n\n\n\nLevel-1 GRD\nGround Range Detected\nThe Sentinel-1 Level-1 GDR products consist of focused SAR data that has been detected, multi-looked and projected to ground range using the Earth ellipsoid model WGS84.\nthis link\n\n\nLevel-1 SLC\nSingle Look Complex (\nThe Sentinel-1 Level-1 SLC products consist of focused SAR data, geo-referenced using orbit and attitude data from the satellite, and provided in slant-range geometry.\nthis link\n\n\nLevel-2 OCN\nOcean\nThe Sentinel-1 Level-2 OCN products for wind, wave and currents applications may contain the following geophysical components derived from the SAR data: Ocean Wind field (OWI), Ocean Swell spectra (OSW), Surface Radial Velocity (RVL).\nthis link\n\n\n\n\n\nSentinel-2\nSentinel-2 acquires optical imagery at high spatial resolution (10m to 60m) over land and coastal waters. The mission supports applications such as agricultural monitoring, emergency management, land cover classifications, and water quality.\n\n\n\nProduct\nInstrument\nDescription\nAvailable at\n\n\n\n\nLevel-1C\nMulti-Spectral Instrument\nThe Sentinel-2 Level-1C product is composed of 110x110 km2 tiles (ortho-images in UTM/WGS84 projection). Earth is subdivided into a predefined set of tiles, defined in UTM/WGS84 projection and using a 100 km step.\nthis link\n\n\nLevel-2A\nMulti-Spectral Instrument\nThe Sentinel-2 Level-2A Collection 1 product provides orthorectified Surface Reflectance (Bottom-Of-Atmosphere: BOA), with sub-pixel multispectral and multitemporal registration accuracy.\nthis link\n\n\n\n\n\nSentinel-3\nSentinel-3 is a mission that regularly measures our Earth’s oceans, land, rivers, lakes, ice on land, sea ice, and the atmosphere. Its goal is to keep track of and help us understand how these large parts of our planet change over long periods.\n\nOcean and Land Colour Instrument\n\n\n\nProduct\nProduct\nDescription\nAvailable at\n\n\n\n\nLevel-1 EFR\nEarth Full Resolution\nProvides TOA radiances at full resolution for each pixel in the instrument grid, each view and each OLCI channel, plus annotation data associated with OLCI pixels.\nthis link\n\n\nLevel-1 ERR\nEarth Reduced Resolution\nThe Sentinel-3 OLCI L1 ERR product provides TOA radiances at reduced resolution for each pixel in the instrument grid, each view and each OLCI channel, plus annotation data associated with OLCI pixels.\nthis link\n\n\nLevel-2 LFR\nLand Full Resolution\nThe Sentinel-3 OLCI L2 LFR product provides land and atmospheric geophysical parameters computed for full resolution.\nthis link\n\n\nLevel-2 LRR\nLand Reduced Resolution\nThe Sentinel-3 OLCI L2 LRR product provides land and atmospheric geophysical parameters computed for reduced resolution.\nthis link\n\n\n\n\n\nSea and Land Surface Temperature Radiometer\n\n\n\nProduct\nData\nDescription\nAvailable at\n\n\n\n\nLevel-1 RBT\nRadiance Brightness Temperature\nThe Sentinel-3 SLSTR Level-1B RBT product provides radiances and brightness temperatures for each pixel in a regular image grid for each view and SLSTR channel.\nthis link\n\n\nLevel-2 LST\nLST: Land Surface Temperature\nThe Sentinel-3 SLSTR Level-2 LST product provides land surface temperature.\nthis link",
    "crumbs": [
      "**About EOPF**",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Overview of EOPF Zarr Products</span>"
    ]
  },
  {
    "objectID": "13_overview_eopf_datasets.html#conclusion",
    "href": "13_overview_eopf_datasets.html#conclusion",
    "title": "Overview of EOPF Zarr Products",
    "section": "Conclusion",
    "text": "Conclusion\nIn this section, we provide an overview of the available Sentinel Missions that will be re-processed and made available as EOPF Zarr products.",
    "crumbs": [
      "**About EOPF**",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Overview of EOPF Zarr Products</span>"
    ]
  },
  {
    "objectID": "13_overview_eopf_datasets.html#whats-next",
    "href": "13_overview_eopf_datasets.html#whats-next",
    "title": "Overview of EOPF Zarr Products",
    "section": "What’s next?",
    "text": "What’s next?\nIn the following chapter, we will dive deep into EOPF Zarr format and understand why it can provide an optimal and efficient application.",
    "crumbs": [
      "**About EOPF**",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Overview of EOPF Zarr Products</span>"
    ]
  },
  {
    "objectID": "21_what_is_zarr.html",
    "href": "21_what_is_zarr.html",
    "title": "Overview of the EOPF Zarr format",
    "section": "",
    "text": "Introduction\nIn our journey to understand cloud-optimised Earth Observation (EO) data, we have frequently mentioned the Zarr format. Now, we will take a closer look and truly understand what Zarr is and why it is such a game-changer for large datasets like those from ESA’s Sentinel missions. This chapter will break down the essential building blocks of Zarr, explaining how it organises data to make it incredibly efficient for cloud-based analysis.",
    "crumbs": [
      "**About EOPF Zarr**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Overview of the EOPF Zarr format</span>"
    ]
  },
  {
    "objectID": "21_what_is_zarr.html#what-is-zarr",
    "href": "21_what_is_zarr.html#what-is-zarr",
    "title": "Overview of the EOPF Zarr format",
    "section": "What Is Zarr?",
    "text": "What Is Zarr?\nZarr is an open-source, cloud-native protocol for storing multi-dimensional arrays. It is specifically designed to work well with cloud storage and larger-scale computing systems and can be seen as a cloud-native alternative to older formats like HDF5 or NetCDF.\nKey advantage to traditional formats is that the Zarr specification stores large multi-dimensional arrays in chunks, which are smaller pieces of the larger array. Chunks can be accessed individually, or multiple chunks can be read and written in parallel, making data access highly efficient.\nZarr works across different storage systems, including local file systems, cloud object storage, as well as distributed file systems, offering a greater flexibility compared to traditional file formats.\nIn addition, Zarr embeds metadata directly alongside the data. This makes Zarr self-descriptive, as each data array contains descriptive information about itself, such as data type, dimensions or additional attributes.\n\n\n\n\n\n\nNote\n\n\n\nPro tip: Learn more about Zarr in the official Zarr Documentation and the Zarr V3 storage specification",
    "crumbs": [
      "**About EOPF Zarr**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Overview of the EOPF Zarr format</span>"
    ]
  },
  {
    "objectID": "21_what_is_zarr.html#components-of-zarr",
    "href": "21_what_is_zarr.html#components-of-zarr",
    "title": "Overview of the EOPF Zarr format",
    "section": "Components of Zarr",
    "text": "Components of Zarr\nZarr is organised in a human-readable, hierarchical structure using simple JSON metadata files and is composed of groups and stores, chunks and metadata:\n\nGroups and Stores\nGroups and stores are concepts that allow Zarr to differentiate between (i) where the data is stored (stores) and (ii) how it is organised (groups). A group is a container for logically organising the data, similar to folders in a file system. A store defines where the data is stored; it can be, e.g. a bucket in the cloud or a directory on a disk.\n\n\nChunks\nZarr divides arrays into smaller, independent pieces (chunks). Through chunking, it is possible to retrieve and process specific areas without loading the complete dataset. Its organisation into chunks is the main reason for Zarr’s high performance. Chunks are saved as binary files inside a /c directory and are further organised through nested folder paths based on their index, e.g. c/0/0/0 for the chunk position [0,0.0].\n\n\nMetadata\nZarr uses descriptive metadata to describe the individual arrays but also the full hierarchy of the dataset. Metadata is stored in zarr.json files and is available on the array, group and store levels. This structured metadata approach makes Zarr datasets self-descriptive and easy to navigate.\nThe graphic below shows an overview of all relevant Zarr components.\n\n\n\nZarr conceptual structure and overview of Zarr components",
    "crumbs": [
      "**About EOPF Zarr**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Overview of the EOPF Zarr format</span>"
    ]
  },
  {
    "objectID": "21_what_is_zarr.html#eopf-zarr-structure",
    "href": "21_what_is_zarr.html#eopf-zarr-structure",
    "title": "Overview of the EOPF Zarr format",
    "section": "EOPF Zarr Structure",
    "text": "EOPF Zarr Structure\nThe ESA EOPF defines Zarr as the encoding format for the EOPF Sentinel Zarr Samples Service. The Zarr encoding is well aligned with ESA’s objective of enhancing the accessibility of Sentinel data by modernising the previous .SAFE encoding into a flexible, cloud-native structure. The cloud-native nature of zarr is expected to broaden the applications of the Sentinel data within the geospatial community while maintaining data quality and established algorithms.\nEOPF Zarr products consist of four main groups:\n\n\n\n\n\n\n\nGroup\nDescription\n\n\n\n\nAttributes\nSTAC format metadata for the Zarr element\n\n\nMeasurements\nMain retrieved variables\n\n\nConditions\nMeasurement context (geometric angles, meteorological/instrumental data)\n\n\nQuality\nFlags and quality information for measurement filtering\n\n\n\n\nEOPF Zarr product example - Sentinel-2 L2A\nLet us imagine a Sentinel-2 L2A tile. The tile has dimensions of approximately 10,980 by 10,980 pixels, and includes 12 spectral bands (B01 to B12, excluding B10) at different resolutions, plus additional data arrays such as a Scene Classification Map (SCL) and Atmospheric Optical Thickness (AOT).\nFor efficient handling, the data is divided into 1,024 by 1,024-pixel chunks. This chunking strategy allows for optimal performance when reading specific spatial regions of interest.\nThe figure below gives a graphical overview of how an EOPF Zarr Sentinel-2 L2A product file is organised. \nThe table below provides a more detailed outline of what content is available in the different groups.\n\n\n\n\n\n\n\n\nGroup\n\nContent\n\n\n\n\nAttributes\n\nProcessing history metadata  Chunking configuration  Global metadata (acquisition time, sensing time, etc.)  Product-specific metadata≈\n\n\nMeasurements\n10m resolution (r10)\nB02 (Blue, 490nm)  B03 (Green, 560nm)  B04 (Red, 665nm) B08 (NIR, 842nm)\n\n\n\n20m resolution (r20)\nB05 (Red Edge 1, 705nm) B06 (Red Edge 2, 740nm) B07 (Red Edge 3, 783nm) B8A (Narrow NIR, 865nm) B11 (SWIR 1, 1610nm) B12 (SWIR 2, 2190nm)\n\n\n\n60m resolution (r60)\nB01 (Coastal aerosol, 443nm) &lt;br?B09 (Water vapour, 945nm)\n\n\nConditions\n\nSun angles (zenith, azimuth)  Viewing angles  Mean solar irradiance  Atmospheric parameters such as (i) Aerosol Optical Thickness (AOT), (ii) Water Vapour (WV) and (iii) Cloud and snow probability\n\n\nQuality\n\nScene Classification Layer (SCL)  Quality flags for each band  Detector footprint  Defective pixels masks\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nZarr Deep Dive: Dive deeper into the benefits of Zarr in a blog post by Lindsey Nield from the Earthmover team: Fundamentals: What is Zarr? A Cloud-Native Format for Tensor Data.",
    "crumbs": [
      "**About EOPF Zarr**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Overview of the EOPF Zarr format</span>"
    ]
  },
  {
    "objectID": "21_what_is_zarr.html#conclusion",
    "href": "21_what_is_zarr.html#conclusion",
    "title": "Overview of the EOPF Zarr format",
    "section": "Conclusion",
    "text": "Conclusion\nThe EOPF Zarr structure allows for efficient access to individual bands or specific spatial regions without loading the entire dataset, making it ideal for large-scale geospatial analysis. It further ensures all relevant metadata is co-located with the data, enhancing data discoverability and usability.",
    "crumbs": [
      "**About EOPF Zarr**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Overview of the EOPF Zarr format</span>"
    ]
  },
  {
    "objectID": "21_what_is_zarr.html#whats-next",
    "href": "21_what_is_zarr.html#whats-next",
    "title": "Overview of the EOPF Zarr format",
    "section": "What’s next?",
    "text": "What’s next?\nNow that you have a theoretical grasp of the Zarr format, the next section Discover EOPF Zarr - Sentinel-2 L2A will provide a first hands-on experience opening an EOPF Zarr product. We will transition to our first Jupyter Notebook where you will directly interact with a Zarr store.",
    "crumbs": [
      "**About EOPF Zarr**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Overview of the EOPF Zarr format</span>"
    ]
  },
  {
    "objectID": "22_zarr_struct_S2L2A.html",
    "href": "22_zarr_struct_S2L2A.html",
    "title": "Discover EOPF Zarr - Sentinel-2 L2A",
    "section": "",
    "text": "Introduction\n🚀 Launch this notebook in JupyterLab\nThis tutorial introduces you to the structure of an EOPF Zarr product sample for Sentinel-2 L2A data. We will demonstrate how to access and open a .zarr product sample with xarray, how to visualise the zarr encoding structure, explore embedded information, and retrieve relevant metadata for further processing.",
    "crumbs": [
      "**About EOPF Zarr**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Discover EOPF Zarr - Sentinel-2 L2A</span>"
    ]
  },
  {
    "objectID": "22_zarr_struct_S2L2A.html#open-a-zarr-store",
    "href": "22_zarr_struct_S2L2A.html#open-a-zarr-store",
    "title": "Discover EOPF Zarr - Sentinel-2 L2A",
    "section": "Open a Zarr Store",
    "text": "Open a Zarr Store\nIn a first step, we use the function open_datatree() from the xarray library to open a .zarr store as a DataTree. Inside, we need to define the following key word arguments:\n\nfilename_or_obj: path leading to a zarr store\nengine: 'eopf-zarr', designed for the EOPF zarr by ESA.\nop_mode: extension by the xarray-eopf development for allowing an analysis or native mode. For more information visit the xarray-eopf documentation.\nchunks: loads the data with dask using the engine’s preferred chunk size, generally identical to the format’s chunk size\n\nThe final print of the DataTree object is commented out, as the display can be quite extensive, showing the entire content within the .zarr. An alternative is to apply a helper function that only displays the higher level structure as shown in the next code cell.\n\nurl = 'https://objects.eodc.eu/e05ab01a9d56408d82ac32d69a5aae2a:202506-s02msil2a/10/products/cpm_v256/S2C_MSIL2A_20250610T103641_N0511_R008_T32UMD_20250610T132001.zarr'\ns2l2a_zarr_sample= xr.open_datatree(url,\n    engine=\"eopf-zarr\", # storage format\n    op_mode=\"native\", # no analysis mode\n    chunks={}, # allows to open the default chunking\n)\n\nIf we apply the helper function print_gen_structure on the root of the DataTree object, we will get a listing of the tree-like structure of the object. We can see all Zarr groups, such as measurements, quality and conditions, their sub-groups and content.\n\nprint(\"Zarr Sentinel 2 L2A Structure\")\nprint_gen_structure(s2l2a_zarr_sample.root) \nprint(\"-\" * 30)\n\nZarr Sentinel 2 L2A Structure\nNone\n  conditions\n    geometry\n    mask\n      detector_footprint\n        r10m\n        r20m\n        r60m\n      l1c_classification\n        r60m\n      l2a_classification\n        r20m\n        r60m\n    meteorology\n      cams\n      ecmwf\n  measurements\n    reflectance\n      r10m\n      r20m\n      r60m\n  quality\n    atmosphere\n      r10m\n      r20m\n      r60m\n    l2a_quicklook\n      r10m\n      r20m\n      r60m\n    mask\n      r10m\n      r20m\n      r60m\n    probability\n      r20m\n------------------------------",
    "crumbs": [
      "**About EOPF Zarr**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Discover EOPF Zarr - Sentinel-2 L2A</span>"
    ]
  },
  {
    "objectID": "22_zarr_struct_S2L2A.html#extract-information-from-zarr-groups",
    "href": "22_zarr_struct_S2L2A.html#extract-information-from-zarr-groups",
    "title": "Discover EOPF Zarr - Sentinel-2 L2A",
    "section": "Extract information from Zarr groups",
    "text": "Extract information from Zarr groups\nIn a next step, we can explore the content of individually contained .zarr groups. By specifying the name of the group and subgroup and adding it into square brackets, we can extract the content of the relevant group. Let us for example extract the content of the subgroup reflectance under measurements.\nAs a result, it is visible that there are three subgroups of the parent node measurements/reflectance: r10, r20 and r60, which are the DataArrays with the three different resolutions of the Sentinel-2 L2A data.\nThe xarray.DataTree structure allows the exploration of additional group-related metadata and information. For example, we can find the chunksize of each array and the coordinates.\n\n# Retrieving the reflectance groups:\n# s2l2a_zarr_sample[\"measurements/reflectance\"] # Run it yourself for an inteactive overview",
    "crumbs": [
      "**About EOPF Zarr**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Discover EOPF Zarr - Sentinel-2 L2A</span>"
    ]
  },
  {
    "objectID": "22_zarr_struct_S2L2A.html#extract-zarr-metadata-on-different-levels",
    "href": "22_zarr_struct_S2L2A.html#extract-zarr-metadata-on-different-levels",
    "title": "Discover EOPF Zarr - Sentinel-2 L2A",
    "section": "Extract Zarr metadata on different levels",
    "text": "Extract Zarr metadata on different levels\nThrough s2l2a_zarr_sample.attrs[] we are able to visualise both the stac_discovery and other_metadata included in the zarr store.   For the properties inside stac_discovery for example we can get the parameters included:\n\n# STAC metadata style:\nprint(list(s2l2a_zarr_sample.attrs[\"stac_discovery\"].keys()))\n\n['assets', 'bbox', 'geometry', 'id', 'links', 'properties', 'stac_extensions', 'stac_version', 'type']\n\n\nWe are also, able to retrieve specific information by diving deep into the stac_discovery metadata, such as:\n\nprint('Date of Item Creation: ', s2l2a_zarr_sample.attrs['stac_discovery']['properties']['created'])\nprint('Item Bounding Box    : ', s2l2a_zarr_sample.attrs['stac_discovery']['bbox'])\nprint('Item ESPG            : ', s2l2a_zarr_sample.attrs['stac_discovery']['properties']['proj:epsg'])\nprint('Sentinel Platform    : ', s2l2a_zarr_sample.attrs['stac_discovery']['properties']['platform'])\nprint('Item Processing Level: ', s2l2a_zarr_sample.attrs['stac_discovery']['properties']['processing:level'])\n\nDate of Item Creation:  2025-06-10T13:20:01+00:00\nItem Bounding Box    :  [9.146276872400831, 52.25344953517325, 7.500940412097549, 53.24953673463324]\nItem ESPG            :  32632\nSentinel Platform    :  sentinel-2c\nItem Processing Level:  L2A\n\n\nAnd from other_metadata, we are able to retrieve the information specific to the instrument variables.\n\n# Complementing metadata:\nprint(list(s2l2a_zarr_sample.attrs[\"other_metadata\"].keys()))\n\n['AOT_retrieval_model', 'L0_ancillary_data_quality', 'L0_ephemeris_data_quality', 'NUC_table_ID', 'SWIR_rearrangement_flag', 'UTM_zone_identification', 'absolute_location_assessment_from_AOCS', 'band_description', 'declared_accuracy_of_AOT_model', 'declared_accuracy_of_radiative_transfer_model', 'declared_accuracy_of_water_vapour_model', 'electronic_crosstalk_correction_flag', 'eopf_category', 'geometric_refinement', 'history', 'horizontal_CRS_code', 'horizontal_CRS_name', 'mean_sensing_time', 'mean_sun_azimuth_angle_in_deg_for_all_bands_all_detectors', 'mean_sun_zenith_angle_in_deg_for_all_bands_all_detectors', 'mean_value_of_aerosol_optical_thickness', 'mean_value_of_total_water_vapour_content', 'meteo', 'multispectral_registration_assessment', 'onboard_compression_flag', 'onboard_equalization_flag', 'optical_crosstalk_correction_flag', 'ozone_source', 'ozone_value', 'percentage_of_degraded_MSI_data', 'planimetric_stability_assessment_from_AOCS', 'product_quality_status', 'reflectance_correction_factor_from_the_Sun-Earth_distance_variation_computed_using_the_acquisition_date', 'spectral_band_of_reference']",
    "crumbs": [
      "**About EOPF Zarr**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Discover EOPF Zarr - Sentinel-2 L2A</span>"
    ]
  },
  {
    "objectID": "22_zarr_struct_S2L2A.html#now-it-is-your-turn",
    "href": "22_zarr_struct_S2L2A.html#now-it-is-your-turn",
    "title": "Discover EOPF Zarr - Sentinel-2 L2A",
    "section": "💪 Now it is your turn",
    "text": "💪 Now it is your turn\nAs we are able to retrieve several items from the EOPF Sentinel Zarr Samples Service STAC API, let us try the following:  ### Task Go to the Sentinel-2 Level-2A collection and: - Choose an item of interest. - Replicate the workflow and explore the item’s metadata. When was it retrieved? - What are the dimensions? - What is the detailed location of the item?",
    "crumbs": [
      "**About EOPF Zarr**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Discover EOPF Zarr - Sentinel-2 L2A</span>"
    ]
  },
  {
    "objectID": "22_zarr_struct_S2L2A.html#conclusion",
    "href": "22_zarr_struct_S2L2A.html#conclusion",
    "title": "Discover EOPF Zarr - Sentinel-2 L2A",
    "section": "Conclusion",
    "text": "Conclusion\nThis tutorial provides an initial understanding of the zarr structure for a Sentinel-2 L2A product sample. By using the xarray library, we can effectively navigate and inspect the different components within the zarr format, including its metadata and array organisation.",
    "crumbs": [
      "**About EOPF Zarr**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Discover EOPF Zarr - Sentinel-2 L2A</span>"
    ]
  },
  {
    "objectID": "22_zarr_struct_S2L2A.html#whats-next",
    "href": "22_zarr_struct_S2L2A.html#whats-next",
    "title": "Discover EOPF Zarr - Sentinel-2 L2A",
    "section": "What’s next?",
    "text": "What’s next?\nNow that you’ve been introduced to the .zarr encoding format, learned its core concepts, and understood the basics of how to explore it, you are prepared for the next step. In the following chapter we will introduce you to STAC and the EOPF Zarr STAC Catalog. As we go along, we are more and more transition from theory to practice, providing you with hands-on tutorials working with EOPF .zarr products.",
    "crumbs": [
      "**About EOPF Zarr**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Discover EOPF Zarr - Sentinel-2 L2A</span>"
    ]
  },
  {
    "objectID": "31_stac_intro.html",
    "href": "31_stac_intro.html",
    "title": "Introduction to STAC",
    "section": "",
    "text": "Introduction\nWelcome to the chapter on EOPF and STAC. In the following section, we will introduce you to the Spatio-Temporal Asset Catalog (STAC). We will explain its fundamental principles and, most importantly, we will explore its structure and core components. Understanding the fundamentals of STAC is key in order to be able to effectively discover and access data from STAC catalogs.",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to STAC</span>"
    ]
  },
  {
    "objectID": "31_stac_intro.html#about-stac",
    "href": "31_stac_intro.html#about-stac",
    "title": "Introduction to STAC",
    "section": "About STAC",
    "text": "About STAC\nThe Spatio-Temporal Asset Catalog (STAC) is a standardised way to catalog and describe geospatial (raster) data. STAC makes it easier to discover, access, and work with geospatial data, in particular satellite data, as it provides a common language for describing spatial and temporal characteristics of the data. This common language improves interoperability between different data providers and software tools.\nThe main goal of STAC is to allow data providers to share their data easily, making it universal for users to understand the where, when, how, and what of the collected data.\nSTAC uses JSON (JavaScript Object Notation) to structure the metadata of geo-referenced datasets. JSON makes it machine-readable. Through its design, STAC is simple and extensible in its design as it is based on a network of JSON files.\nSTAC has evolved into a well-recognised community standard. The key benefit supporting its wide adoption is that one can use the same code and API to access data from different data repositories.",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to STAC</span>"
    ]
  },
  {
    "objectID": "31_stac_intro.html#the-stac-ecosystem",
    "href": "31_stac_intro.html#the-stac-ecosystem",
    "title": "Introduction to STAC",
    "section": "The STAC ecosystem",
    "text": "The STAC ecosystem\nSTAC has evolved into a vast ecosystem offering various resources and tools for accessing, managing, and building STAC catalogs. Below is a non-exclusive list of tools and plug-ins that will help to explore the STAC ecosystem:\n\n\n\nCategory\nTool/Plugin\nDescription\nLanguage\n\n\n\n\nSTAC Tools\nSTAC Browser\nA user-friendly web interface for visually exploring and interacting with various STAC catalogs.\nWeb interface\n\n\n\nSTAC Server\nA reference implementation for serving STAC catalogs and collections.\nPython\n\n\nSTAC libraries and plug-ins\nSTAC Validator\nA tool for programmatically validating STAC Catalogs, Collections, and Items to ensure compliance with the STAC specification.\nPython\n\n\n\nPySTAC\nA Python library for reading, writing, and validating STAC objects, facilitating the creation and manipulation of STAC data.\nPython\n\n\n\npystac-client\nA Python library that provides a convenient and powerful interface for searching and accessing STAC data from STAC API servers.\nPython\n\n\n\nrstac\nAn R package that provides functionalities for interacting with STAC APIs and working with STAC objects within the R environment.\nR\n\n\n\nSTAC.jl\nA Julia package designed for working with STAC, enabling users to interact with STAC catalogs and process geospatial data.\nJulia\n\n\n\nSTACCube.jl\nA Julia package that facilitates the creation and management of STAC-compliant data cubes from various geospatial datasets.\nJulia",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to STAC</span>"
    ]
  },
  {
    "objectID": "31_stac_intro.html#stac-components",
    "href": "31_stac_intro.html#stac-components",
    "title": "Introduction to STAC",
    "section": "STAC components",
    "text": "STAC components\nNow, let us start exploring the structure of STAC. STAC consists of four main components: (i) Catalog, (ii) Collection, (iii) Item and (iv) Asset. See the figure below for the principal organisation of the STAC components.\n\n\n\nSTAC structure\n\n\n\nLet us now explore in more detail the individual components:\n\nCatalog\nA Catalog serves as the initial entry point of a STAC. A catalog is a very simple construct; it simply provides links to Collections or Items. The closest analogue is a folder on your computer. A Catalog can be a folder for Items, but it can also be a folder for Collections or other Catalogs. When searching for specific data, you first establish a connection to a valid STAC catalog.\n\n\nCollection\nCollections are containers that support the grouping of Items. The Collection entity shares most fields with the Catalog entity but has several additional fields, such as license, extent (spatial and temporal), providers, keywords and summaries. Every Item in a Collection links back to its Collection. Collection is often used to provide additional structure in a STAC catalog.\n\n\n\n\n\n\nNote\n\n\n\nBut when to use a Collection versus a Catalog? A Collection generally consists of a set of assets that share the same properties and share higher-level metadata. For example, data from the same satellite sensor or constellation would typically be in one Collection.\nCatalogs, in turn, are used to split overly large Collections into groups and to group collections into a catalog of Collections (e.g. as an entry point for navigation to several Collections).\nIt is recommended to use Collections for what you want users to find and Catalogs for structuring and grouping Collections.\n\n\n\n\nItem\nAn Item is the fundamental element of STAC and typically represents a single scene at one place and time. It is a GeoJSON supplemented with additional metadata, which serves as an index to Assets.\n\n\n\nItem entity\n\n\n\n\nAsset\nAn Asset is the smallest element inside a STAC and represents the individual data file that is linked in a STAC Item.\n\n\nAnalogy: Organising a drinks menu as a STAC\nTo better understand the relation of STAC components, let us imagine a Drinks menu as a STAC. How would you structure Drinks as a STAC?\nLet us start with the Drinks category itself. The menu is analogous to a STAC Catalog, as it serves as the top-level entry point, providing an overview of all beverages available.\nWithin this Drinks catalog, we can group the Drinks further in There are hot and cold beverages, caffeinated and non-caffeinated drinks. These categories represent Collections in STAC.  For our analogy, let us say the menu is divided into two main collections:\n\nCaffeinated Drinks Collection: This section groups all beverages that contain caffeine.\nNon-Caffeinated Drinks Collection: This section groups all beverages that do not contain caffeine.\n\nEach of these collections contains specific drinks, which are analogous to STAC Items. Drink Items could be, e.g. Juices or Milks. Both represent again a group of specific juices and milks, which are analogous to Assets in STAC. For the Drink Items defined, theirAssets` might include:\n\n\n\nItem\nAssets\n\n\n\n\nMilks\nOat Milk  Regular Milk\n\n\nJuices\nApple Juice  Organge Juice  …\n\n\n\nThe STAC structure allows us to easily navigate a vast amount of data, just as a well-organised menu helps a customer quickly find their desired drink.\n\n\n\nDrinks Menu as a STAC analogy",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to STAC</span>"
    ]
  },
  {
    "objectID": "31_stac_intro.html#conclusion",
    "href": "31_stac_intro.html#conclusion",
    "title": "Introduction to STAC",
    "section": "Conclusion",
    "text": "Conclusion\nIn this section, you got an introduction to the Spatio-Temporal Asset Catalog (STAC) and learned what STAC is and explored the main components of a STAC. Understanding the distinction between Catalog, Collection, Items and Assets is important to effectively navigating through STAC APIs.",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to STAC</span>"
    ]
  },
  {
    "objectID": "31_stac_intro.html#whats-next",
    "href": "31_stac_intro.html#whats-next",
    "title": "Introduction to STAC",
    "section": "What’s next?",
    "text": "What’s next?\nIn the following section, we will explore the web interface of the EOPF Sentinel Zarr Samples Service STAC Catalog.",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to STAC</span>"
    ]
  },
  {
    "objectID": "32_eopf_stac_zarr_tutorial.html",
    "href": "32_eopf_stac_zarr_tutorial.html",
    "title": "Explore the web interface of the EOPF Zarr STAC Catalog",
    "section": "",
    "text": "Introduction\nThis section introduces you to the EOPF Sentinel Zarr Samples Service STAC Catalog, which offers access to the re-engineered Sentinel-1, Sentinel-2 and Sentinel-3 data products. We will guide you through its web interface, inspect the various levels of STAC components, and demonstrate how to access the underlying Sentinel Zarr data.",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Explore the web interface of the EOPF Zarr STAC Catalog</span>"
    ]
  },
  {
    "objectID": "32_eopf_stac_zarr_tutorial.html#our-starting-point",
    "href": "32_eopf_stac_zarr_tutorial.html#our-starting-point",
    "title": "Explore the web interface of the EOPF Zarr STAC Catalog",
    "section": "Our Starting Point",
    "text": "Our Starting Point\nThe first step is to access the main homepage of the EOPF Sentinel Zarr Samples Service STAC Catalog. The landing page offers you a comprehensive overview of the available data collections. This serves as our initial entry point into the catalog.\n\n\n\nHome page\n\n\nThree main areas can be identified: (i) the API and URL section, (ii) Search bar and (iii) Collections Display. \nAs outlined in detail in the book section The EOPF Available Datasets, the catalog displays the 11 distinct collections available from the Sentinel-1, Sentinel-2, and Sentinel-3 missions.  The user interface provides an intuitive way to browse through all of these collections. It is possible to filter them by specific criteria or select them manually, allowing precise control over the displayed data.",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Explore the web interface of the EOPF Zarr STAC Catalog</span>"
    ]
  },
  {
    "objectID": "32_eopf_stac_zarr_tutorial.html#exploring-sentinel-collections",
    "href": "32_eopf_stac_zarr_tutorial.html#exploring-sentinel-collections",
    "title": "Explore the web interface of the EOPF Zarr STAC Catalog",
    "section": "Exploring Sentinel Collections",
    "text": "Exploring Sentinel Collections\nLet us now select one of the 11 Collection available, e.g. let us select the Sentinel 2-Level-2A collection. Once you have selected the Collection, you will be directed to the interface of a specific Collection.\n\n\n\nWeb interface of the Sentinel-2 Level-2A Collection of the EOPF Sentinel Zarr Samples Service STAC Catalog\n\n\nThe interface can be divided into five principal sections:\n\nDescription: The name and a brief introduction to the available collection. This includes crucial details such as the temporal extent (the period over which the data was acquired)\nAPI and URL: for further application.\nSpatial Extent: The geographical area of the displayed items is shown on the map.\nAvailable Items: On the right-hand side of the page, a list of links for the items contained within the collection corresponds to the selected collection.\nCollection Metadata: A general overview of the Collection’s metadata, its providers, instruments, and the corresponding DOIs for research.\nMetadata: Specific information about the bands and instruments, such as backscatter or reflectance information.\nAssets in Items: The Assets structure is available for the Items available in the Collection.\n\n\nFiltering Collections\nAny selected Collection (in this case Sentinel-2 Level-2A) allows us to filter the items of our interest by temporal and spatial extent. We can access this tab by clicking on Show Filters on the right side under the Items section.\n\n\n\nOverview of interface that opens when clicking in Show Filters\n\n\nThe interface that opens allows us to select on the calendar a specific period we are interested in. This is particularly useful when we are interested in a temporal analysis. Let us search over the available items captured between May 1st and May 5th 2024.\n\n\n\nFiltering over time\n\n\nAdditionally, we can select a location we are interested in by checking the Filter by spatial extent box. This allows us to refine our search over an area of interest. Once you tick the box, a map activates and allows us to draw a bounding box that we can drag and drop. Let us select Europe as our area of interest.\n\n\n\nFiltering over spatial extent\n\n\nOnce we select the desired period and area via the filters, we can sort the items that match our search by ID, Date and Time, or select the number of resulting items we are interested in per page. In this case, we select 2, so the overview is digestible. Then, we click Submit.\n\n\n\nResulting Items\n\n\nUnder the window, we can now see that two items appear. For example: S2B_MSIL2A_20250504T131719_N0511_R124_T27VVL_20250504T165710\nWe can select any of the resulting items, and this will enable us to access an Item inside the Collection.",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Explore the web interface of the EOPF Zarr STAC Catalog</span>"
    ]
  },
  {
    "objectID": "32_eopf_stac_zarr_tutorial.html#exploring-items",
    "href": "32_eopf_stac_zarr_tutorial.html#exploring-items",
    "title": "Explore the web interface of the EOPF Zarr STAC Catalog",
    "section": "Exploring Items",
    "text": "Exploring Items\nWhen a specific Item sparks our interest, clicking on it will bring us to a detailed overview page for that selected Item. \nThis Item interface is composed of:\n\nDescription: The name of the Item. Depending on the mission and collection it belongs to, the composition of the name changes.\nSpatial Extent: The geographical footprint of the selected Item is shown on the map.\nCollection Metadata: A general overview of the Collection’s metadata, its providers, instruments, resolution, grid and the corresponding DOIs for research.\nAPI and URL: Allows the entry point for further retrieval of the individual assets.\nAssets menu: lists all the Assets that are part of the selected Item.\n\n\n\n\nThe item selected inside the Sentinel-2 Level-2A Collection\n\n\n\n\n\n\n\n\nImportant\n\n\n\nAt this level of the STAC structure, we are already diving deep into the STAC levels, and have explored the Catalog, Collection and Item components described in the Introduction to STAC section.",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Explore the web interface of the EOPF Zarr STAC Catalog</span>"
    ]
  },
  {
    "objectID": "32_eopf_stac_zarr_tutorial.html#assets",
    "href": "32_eopf_stac_zarr_tutorial.html#assets",
    "title": "Explore the web interface of the EOPF Zarr STAC Catalog",
    "section": "Assets",
    "text": "Assets\nInside the selected Item, we will get an overview of the available Assets that belong to the Item. By expanding the dropdown menu for any Asset of interest, you can access its specific metadata and, most importantly, the actual data. \n\n\n\nOverview of the web interface on Asset level\n\n\nIn the case of the Sentinel-2 Level-2A collection, each asset corresponds to one of the 13 spectral bands available. The array information provides details about the structure and content of the data, hinting at the actual values contained within the asset. It also contains the chunking grid specification and all the crucial metadata necessary to structure and process the data through a wide range of geospatial methodologies.\n\nAccessing Assets\nFor direct data access of Assetz and therefore the actual data, there are two options provided via the web interface: * Download: It is possible to download only one asset separately in .zarr format by clicking the Download option associated with an Asset, and * Copy URL: We can also retrieve the unique URL of the specified Asset, which allows us to directly integrate the link into programmatic workflows, without the need to download the Asset. We can get it by simply clicking on the Copy URL option under the Asset of our interest.\n\n\n\nData access options via the web interface",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Explore the web interface of the EOPF Zarr STAC Catalog</span>"
    ]
  },
  {
    "objectID": "32_eopf_stac_zarr_tutorial.html#now-it-is-your-turn",
    "href": "32_eopf_stac_zarr_tutorial.html#now-it-is-your-turn",
    "title": "Explore the web interface of the EOPF Zarr STAC Catalog",
    "section": "💪 Now it is your turn",
    "text": "💪 Now it is your turn\nYour task now is to explore the web interface of the EOPF Sentinel Zarr Samples Service STAC Catalog on your own and explore other Collections than the one we showcased.\n\nTask 1: Discover Sentinel-1 GRD Data\nNavigate to the Sentinel-1 Level-1 GRD Collection.\n\nHow many items can you find for the most recent two years available in the catalogue?\nTry filtering by different periods and observe how the results change. How many items are available for September 2023?\n\n\n\nTask 2: Mapping Your Interests\nExplore the interactive map within the Sentinel-1 Level-1 GRD and the Sentinel-2 Level-2A collections.\n\nCan you identify and list the names of at least three distinct geographical areas where a significant number of items are available? (Hint: Look for clusters of the displayed items!)\n\n\n\nTask 3: Unpacking an Asset\nSelect an item from any collection that looks interesting to you. Click on it to view its details. Then, expand one of the assets.\n\nWhat kind of array information is provided?\nWho is the data provider?\nHow would this information be useful if you were to process this data?",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Explore the web interface of the EOPF Zarr STAC Catalog</span>"
    ]
  },
  {
    "objectID": "32_eopf_stac_zarr_tutorial.html#conclusion",
    "href": "32_eopf_stac_zarr_tutorial.html#conclusion",
    "title": "Explore the web interface of the EOPF Zarr STAC Catalog",
    "section": "Conclusion",
    "text": "Conclusion\nThis section walked you through the web interface of the EOPF Sentinel Zarr Samples Service STAC Catalog. We have demonstrated how to navigate its interface, from the initial overview of the available Collections to the detailed inspection of specific Items and Assets. By understanding the structure and components of a STAC catalog, we are able to efficiently access re-engineered EOPF Zarr assets.",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Explore the web interface of the EOPF Zarr STAC Catalog</span>"
    ]
  },
  {
    "objectID": "32_eopf_stac_zarr_tutorial.html#whats-next",
    "href": "32_eopf_stac_zarr_tutorial.html#whats-next",
    "title": "Explore the web interface of the EOPF Zarr STAC Catalog",
    "section": "What’s next?",
    "text": "What’s next?\nIn the next section, we will explore how to programmatically connect to and search through the EOPF Sentinel Zarr Samples Service STAC API with the help of the pystac and the pystac-client Python libraries.",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Explore the web interface of the EOPF Zarr STAC Catalog</span>"
    ]
  },
  {
    "objectID": "33_eopf_stac_connection.html",
    "href": "33_eopf_stac_connection.html",
    "title": "Access the EOPF Zarr STAC API with Python",
    "section": "",
    "text": "Introduction\n🚀 Launch this notebook in JupyterLab\nIn this section, we will dive into the programmatic access of EOPF Zarr Collections available in the EOPF Sentinel Zarr Sample Service STAC Catalog. We will introduce Python libraries that enable us to effectively access and search through STAC catalogs.",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Access the EOPF Zarr STAC API with Python</span>"
    ]
  },
  {
    "objectID": "33_eopf_stac_connection.html#establish-a-connection-to-the-eopf-zarr-stac-catalog",
    "href": "33_eopf_stac_connection.html#establish-a-connection-to-the-eopf-zarr-stac-catalog",
    "title": "Access the EOPF Zarr STAC API with Python",
    "section": "Establish a connection to the EOPF Zarr STAC Catalog",
    "text": "Establish a connection to the EOPF Zarr STAC Catalog\nOur first step is to establish a connection to the EOPF Sentinel Zarr Sample Service STAC Catalog. For this, you need the Catalog’s base URL, which you can find on the web interface under the API & URL tab. By clicking on 🔗Source, you will get the address of the STAC metadata file - which is available here.\n\n\n\nEOPF API url for connection\n\n\nCopy paste the URL: https://stac.core.eopf.eodc.eu/.\nWith the Client.open() function, we can create the access to the starting point of the Catalog by providing the specific url. If the connection was successful, you will see the description of the STAC catalog and additional information.\n\neopf_stac_api_root_endpoint = \"https://stac.core.eopf.eodc.eu/\" #root starting point\neopf_catalog = Client.open(url=eopf_stac_api_root_endpoint) # calls the selected url\neopf_catalog\n\n\n\n\n\n    \n        \n            \n                \n                    \n        \n            type\n            \"Catalog\"\n        \n    \n                \n            \n                \n                    \n        \n            id\n            \"eopf-sample-service-stac-api\"\n        \n    \n                \n            \n                \n                    \n        \n            stac_version\n            \"1.1.0\"\n        \n    \n                \n            \n                \n                    \n        \n            description\n            \"STAC catalog of the EOPF Sentinel Zarr Samples Service\"\n        \n    \n                \n            \n                \n                    \n        links[] 20 items\n        \n            \n        \n            \n                \n        \n            0\n            \n        \n            \n                \n        \n            rel\n            \"self\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.core.eopf.eodc.eu/\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \n        \n            \n                \n        \n            rel\n            \"root\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.core.eopf.eodc.eu/\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"EOPF Sentinel Zarr Samples Service STAC API\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            \n        \n            \n                \n        \n            rel\n            \"data\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.core.eopf.eodc.eu/collections\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            \n        \n            \n                \n        \n            rel\n            \"conformance\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.core.eopf.eodc.eu/conformance\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"STAC/OGC conformance classes implemented by this server\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            4\n            \n        \n            \n                \n        \n            rel\n            \"search\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.core.eopf.eodc.eu/search\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/geo+json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"STAC search\"\n        \n    \n            \n        \n            \n                \n        \n            method\n            \"GET\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            5\n            \n        \n            \n                \n        \n            rel\n            \"search\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.core.eopf.eodc.eu/search\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/geo+json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"STAC search\"\n        \n    \n            \n        \n            \n                \n        \n            method\n            \"POST\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            6\n            \n        \n            \n                \n        \n            rel\n            \"http://www.opengis.net/def/rel/ogc/1.0/queryables\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.core.eopf.eodc.eu/queryables\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/schema+json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Queryables\"\n        \n    \n            \n        \n            \n                \n        \n            method\n            \"GET\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            7\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.core.eopf.eodc.eu/collections/sentinel-2-l2a\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sentinel-2 Level-2A\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            8\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.core.eopf.eodc.eu/collections/sentinel-3-slstr-l1-rbt\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sentinel-3 SLSTR Level-1 RBT\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            9\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.core.eopf.eodc.eu/collections/sentinel-3-olci-l2-lfr\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sentinel-3 OLCI Level-2 LFR\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            10\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.core.eopf.eodc.eu/collections/sentinel-2-l1c\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sentinel-2 Level-1C\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            11\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.core.eopf.eodc.eu/collections/sentinel-3-slstr-l2-lst\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sentinel-3 SLSTR Level-2 LST\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            12\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.core.eopf.eodc.eu/collections/sentinel-1-l1-slc\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sentinel-1 Level-1 SLC\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            13\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.core.eopf.eodc.eu/collections/sentinel-3-olci-l1-efr\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sentinel-3 OLCI Level-1 EFR\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            14\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.core.eopf.eodc.eu/collections/sentinel-3-olci-l1-err\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sentinel-3 OLCI Level-1 ERR\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            15\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.core.eopf.eodc.eu/collections/sentinel-1-l2-ocn\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sentinel-1 Level-2 OCN\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            16\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.core.eopf.eodc.eu/collections/sentinel-1-l1-grd\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sentinel-1 Level-1 GRD\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            17\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.core.eopf.eodc.eu/collections/sentinel-3-olci-l2-lrr\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sentinel-3 OLCI Level-2 LRR\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            18\n            \n        \n            \n                \n        \n            rel\n            \"service-desc\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.core.eopf.eodc.eu/api\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/vnd.oai.openapi+json;version=3.0\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"OpenAPI service description\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            19\n            \n        \n            \n                \n        \n            rel\n            \"service-doc\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://stac.core.eopf.eodc.eu/api.html\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"text/html\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"OpenAPI service documentation\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n                \n            \n                \n                    \n        conformsTo[] 21 items\n        \n            \n        \n            \n                \n        \n            0\n            \"http://www.opengis.net/spec/cql2/1.0/conf/basic-cql2\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \"http://www.opengis.net/spec/cql2/1.0/conf/cql2-json\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            \"http://www.opengis.net/spec/cql2/1.0/conf/cql2-text\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            \"http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            4\n            \"http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            5\n            \"http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            6\n            \"http://www.opengis.net/spec/ogcapi-features-3/1.0/conf/features-filter\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            7\n            \"http://www.opengis.net/spec/ogcapi-features-3/1.0/conf/filter\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            8\n            \"https://api.stacspec.org/v1.0.0-rc.2/item-search#filter\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            9\n            \"https://api.stacspec.org/v1.0.0/collections\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            10\n            \"https://api.stacspec.org/v1.0.0/collections/extensions/transaction\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            11\n            \"https://api.stacspec.org/v1.0.0/core\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            12\n            \"https://api.stacspec.org/v1.0.0/item-search\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            13\n            \"https://api.stacspec.org/v1.0.0/item-search#fields\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            14\n            \"https://api.stacspec.org/v1.0.0/item-search#query\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            15\n            \"https://api.stacspec.org/v1.0.0/item-search#sort\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            16\n            \"https://api.stacspec.org/v1.0.0/ogcapi-features\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            17\n            \"https://api.stacspec.org/v1.0.0/ogcapi-features#fields\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            18\n            \"https://api.stacspec.org/v1.0.0/ogcapi-features#query\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            19\n            \"https://api.stacspec.org/v1.0.0/ogcapi-features#sort\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            20\n            \"https://api.stacspec.org/v1.0.0/ogcapi-features/extensions/transaction\"\n        \n    \n            \n        \n    \n        \n    \n                \n            \n                \n                    \n        \n            title\n            \"EOPF Sentinel Zarr Samples Service STAC API\"\n        \n    \n                \n            \n        \n    \n\n\n\nCongratulations. We successfully connected to the EOPF Zarr STAC Catalog, and we can now start exploring its content.",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Access the EOPF Zarr STAC API with Python</span>"
    ]
  },
  {
    "objectID": "33_eopf_stac_connection.html#explore-available-collections",
    "href": "33_eopf_stac_connection.html#explore-available-collections",
    "title": "Access the EOPF Zarr STAC API with Python",
    "section": "Explore available collections",
    "text": "Explore available collections\nOnce a connection established, the next logical step is to get an overview of all the collections the STAC catalog offers. We can do this with the function get_all_collections(). The result is a list, which we can loop through to print the relevant collection IDs.\nPlease note: Since the EOPF Zarr STAC Catalog is still in active development, we need to test whether a collection is valid, otherwise you might get an error message. The code below is testing for validity and for one collection, it throws an error.\nYou see, that so far, we can browse through 10 available collections\n\ntry:\n    for collection in eopf_catalog.get_all_collections():\n        print(collection.id)\n\nexcept Exception:\n    print(\n        \"* [https://github.com/EOPF-Sample-Service/eopf-stac/issues/18 appears to not be resolved]\"\n    )\n\nsentinel-2-l2a\nsentinel-3-slstr-l1-rbt\nsentinel-3-olci-l2-lfr\nsentinel-2-l1c\nsentinel-3-slstr-l2-lst\nsentinel-1-l1-slc\nsentinel-3-olci-l1-efr\nsentinel-3-olci-l1-err\nsentinel-1-l2-ocn\nsentinel-1-l1-grd\n* [https://github.com/EOPF-Sample-Service/eopf-stac/issues/18 appears to not be resolved]\n\n\nIn a next step, we can select one collection and retrieve certain metadata that allow us to get more information about the selected collection, such as keywords, the ID and useful links for resources.\n\nS2l2a_coll = eopf_catalog.get_collection('sentinel-2-l2a')\nprint('Keywords:        ',S2l2a_coll.keywords)\nprint('Catalog ID:      ',S2l2a_coll.id)\nprint('Available Links: ',S2l2a_coll.links)\n\nKeywords:         ['Copernicus', 'Sentinel', 'EU', 'ESA', 'Satellite', 'Global', 'Imagery', 'Reflectance']\nCatalog ID:       sentinel-2-l2a\nAvailable Links:  [&lt;Link rel=items target=https://stac.core.eopf.eodc.eu/collections/sentinel-2-l2a/items&gt;, &lt;Link rel=parent target=https://stac.core.eopf.eodc.eu/&gt;, &lt;Link rel=root target=&lt;Client id=eopf-sample-service-stac-api&gt;&gt;, &lt;Link rel=self target=https://stac.core.eopf.eodc.eu/collections/sentinel-2-l2a&gt;, &lt;Link rel=license target=https://sentinel.esa.int/documents/247904/690755/Sentinel_Data_Legal_Notice&gt;, &lt;Link rel=cite-as target=https://doi.org/10.5270/S2_-znk9xsj&gt;, &lt;Link rel=http://www.opengis.net/def/rel/ogc/1.0/queryables target=https://stac.core.eopf.eodc.eu/collections/sentinel-2-l2a/queryables&gt;]",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Access the EOPF Zarr STAC API with Python</span>"
    ]
  },
  {
    "objectID": "33_eopf_stac_connection.html#searching-inside-the-eopf-stac-api",
    "href": "33_eopf_stac_connection.html#searching-inside-the-eopf-stac-api",
    "title": "Access the EOPF Zarr STAC API with Python",
    "section": "Searching inside the EOPF STAC API",
    "text": "Searching inside the EOPF STAC API\nWith the .search() function of the pystac-client library, we can search inside a STAC catalog we established a connection with. We can filter based on a series of parameters to tailor the search for available data for a specific time period and geographic bounding box.\n\nFilter for temporal extent\nLet us search on the datetime parameter. For this, we specify the datetime argument for a time period we are interested in, e.g. from 1 May 2020 to 31 May 2023. In addition, we also specify the collection parameter indicating that we only want to search for the Sentinel-2 L2A collection.\nWe apply the helper function list_found_elements which constructs a list from the search result. If we check the length of the final list, we can see that for the specified time period, 196 items were found.\n\ntime_frame = eopf_catalog.search(  #searching the catalog\n    collections='sentinel-2-l2a',\n    datetime=\"2020-05-01T00:00:00Z/2023-05-31T23:59:59.999999Z\")  # the interval we are interested in, separated by '/'\n\n# we apply the helper function `list_found_elements`\ntime_items=list_found_elements(time_frame)\nprint(time_frame)\n\nprint(\"Search Results:\")\nprint('Total Items Found for Sentinel-2 L-2A between May 1, 2020, and May 31, 2023:  ',len(time_items[0]))\n\n&lt;pystac_client.item_search.ItemSearch object at 0x7fc91ead3670&gt;\nSearch Results:\nTotal Items Found for Sentinel-2 L-2A between May 1, 2020, and May 31, 2023:   196\n\n\n\n\nFilter for spatial extent\nNow, let us filter based on a specific area of interest. We can use the bbox argument, which is composed by providing the top-left and bottom-right corner coordinates. It is similar to drawing the extent in the interactive map of the EOPF browser interface.\nFor example, we defined a bounding box of the outskirts of Innsbruck, Austria. We then again apply the helper function list_found_elements and see that for the defined area, only 39 items are available.\n\nbbox_search =  eopf_catalog.search(  #searching the catalog\n    collections='sentinel-2-l2a',\n    bbox=(\n        11.124756, 47.311058, #top left\n        11.459839, 47.463624  #bottom-right\n        )\n)\n\ninnsbruck_sets=list_found_elements(bbox_search) #we apply our constructed function that stores internal information\n\n#Results\nprint(\"Search Result:\")\nprint('Total Items Found:  ',len(innsbruck_sets[0]))\n\nSearch Result:\nTotal Items Found:   50\n\n\n\n\nCombined filtering: Collection + temporal extent + spatial extent\nAs a usual workflow, we often look for datasets within an AOI and a specific period of time. The search() function allows us also to combine the collection, bbox and datetime arguments in one search request.\nLet us now search for Items available for the AOI around Innsbruck within the previously defined timeframe for the Sentinel-2 Level-2A collection. As a result, we get 27 Items that are available for our selection.\n\ninnsbruck_s2 = eopf_catalog.search( \n    collections= 'sentinel-2-l2a', # interest Collection,\n    bbox=(11.124756, 47.311058, # AOI extent\n          11.459839,47.463624),\n    datetime='2020-05-01T00:00:00Z/2025-05-31T23:59:59.999999Z' # interest period\n)\n\ncombined_ins =list_found_elements(innsbruck_s2)\n\nprint(\"Search Results:\")\nprint('Total Items Found for Sentinel-2 L-2A over Innsbruck:  ',len(combined_ins[0]))\n\nSearch Results:\nTotal Items Found for Sentinel-2 L-2A over Innsbruck:   27\n\n\nLet us now repeat a combine search for a different collection. Let us define a new AOI for the coastal area of Rostock, Germany and let us search over the Sentinel-3 SLSTR-L2 collection for the same time period as above. As a result, 14 Items are available for the specified search.\n\nrostock_s3 = eopf_catalog.search(\n    bbox=(11.766357,53.994566, # AOI extent\n          12.332153,54.265086),\n    collections= ['sentinel-3-slstr-l2-lst'], # interest Collection\n    datetime='2020-05-01T00:00:00Z/2025-05-31T23:59:59.999999Z' # interest period\n)\n\ncombined_ros=list_found_elements(rostock_s3)\n\nprint(\"Search Results:\")\nprint('Total Items Found for Sentinel-3 SLSTR-L2 over Rostock Coast:  ',len(combined_ros[0]))\n\nSearch Results:\nTotal Items Found for Sentinel-3 SLSTR-L2 over Rostock Coast:   18\n\n\n\n\nRetrieve Asset URLs for accessing the data\nSo far, we have made a search among the STAC catalog and browsed over the general metadata of the collections. To access the actual EOPF Zarr Items, we need to get their storage location in the cloud.\nThe relevant information we can find inside the .items argument by the .get_assets() function. Inside, it allows us to specify the .MediaType we are interested in. In our example, we want to obtain the location of the .zarr file.\nLet us retrieve the url of the 27 available items over Innsbruck. The resulting URL we can then use to directly access an asset in our workflow.\n\nassets_loc=[] # a list with the ids of the items we are interested in\nfor x in range(len(combined_ins[0])): # We retrieve only the first asset in the Innsbruck list combined_ins\n    assets_loc.append(S2l2a_coll # we set into the Sentinel-2 L-2A collection\n                      .get_item(combined_ins[0][x])  # We only get the Innsbruck filtered items\n                      .get_assets(media_type=MediaType.ZARR)) # we obtain the .zarr location\n    \nfirst_item = assets_loc[0]   # we select the first item from our list\n\nprint(\"Search Results:\")\nprint('URL for accessing',combined_ins[0][0],'item:  ',first_item['product']) # assets_loc[0] corresponds only to the first element:\n\nSearch Results:\nURL for accessing S2B_MSIL2A_20250530T101559_N0511_R065_T32TPT_20250530T130924 item:   &lt;Asset href=https://objects.eodc.eu:443/e05ab01a9d56408d82ac32d69a5aae2a:202505-s02msil2a/30/products/cpm_v256/S2B_MSIL2A_20250530T101559_N0511_R065_T32TPT_20250530T130924.zarr&gt;\n\n\n\n\nRetrieve Item metadata\nFinally, once you selected an Item, you can also explore the relevant metadata on Item level. For example with the keys() function, you can retrieve the available assets of the selected Item.\n\nprint('Available Assets: ', list(first_item.keys()))\n\nAvailable Assets:  ['SR_10m', 'SR_20m', 'SR_60m', 'AOT_10m', 'B01_20m', 'B02_10m', 'B03_10m', 'B04_10m', 'B05_20m', 'B06_20m', 'B07_20m', 'B08_10m', 'B09_60m', 'B11_20m', 'B12_20m', 'B8A_20m', 'SCL_20m', 'TCI_10m', 'WVP_10m', 'product']",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Access the EOPF Zarr STAC API with Python</span>"
    ]
  },
  {
    "objectID": "33_eopf_stac_connection.html#now-it-is-your-turn",
    "href": "33_eopf_stac_connection.html#now-it-is-your-turn",
    "title": "Access the EOPF Zarr STAC API with Python",
    "section": "💪 Now it is your turn",
    "text": "💪 Now it is your turn\nThe following expercises will help you master the STAC API and understand how to find the data you need.\n\nTask 1: Explore Your Own Area of Interest\n\nGo to http://bboxfinder.com/ and select an area of interest (AOI) (e.g. your hometown, a research site, etc.)\nCopy the bounding box coordinates of your area of interest\nChange the provided code above to search for data over your AOI\n\n\n\nTask 2: Temporal Analysis\n\nCompare data availability across different years for the Sentinel-2 L-2A Collection.\nSearch for items in year 2022\nRepeat the search for year 2024\n\n\n\nTask 3: Explore the SAR Mission and combine multiple criteria\n\nDo the same for a different Collection for example the Sentinel-1 Level-1 GRD, e.g. you can use the ID sentinel-1-l1-grd\nHow many assets are availanble for the year 2024?",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Access the EOPF Zarr STAC API with Python</span>"
    ]
  },
  {
    "objectID": "33_eopf_stac_connection.html#conclusion",
    "href": "33_eopf_stac_connection.html#conclusion",
    "title": "Access the EOPF Zarr STAC API with Python",
    "section": "Conclusion",
    "text": "Conclusion\nThis tutorial has provided a clear and practical introduction on how you can programmatically access and search through EOPF Sentinel Zarr Sample Service STAC API.",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Access the EOPF Zarr STAC API with Python</span>"
    ]
  },
  {
    "objectID": "33_eopf_stac_connection.html#whats-next",
    "href": "33_eopf_stac_connection.html#whats-next",
    "title": "Access the EOPF Zarr STAC API with Python",
    "section": "What’s next?",
    "text": "What’s next?\nIn the following section, we will explore how to retrieve an Item of our interest, based on several parameters and load the actual data array as xarray.",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Access the EOPF Zarr STAC API with Python</span>"
    ]
  },
  {
    "objectID": "34_eopf_stac_xarray_tutorial.html",
    "href": "34_eopf_stac_xarray_tutorial.html",
    "title": "From STAC to Data: Accessing EOPF Zarr with xarray",
    "section": "",
    "text": "Introduction\n🚀 Launch this notebook in JupyterLab\nIn this tutorial we will demonstrate how to access EOPF Zarr products directly from the EOPF Sentinel Zarr Sample Service STAC Catalog.",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>From STAC to Data: Accessing EOPF Zarr with xarray</span>"
    ]
  },
  {
    "objectID": "34_eopf_stac_xarray_tutorial.html#establish-a-connection-to-the-eopf-zarr-stac-catalog",
    "href": "34_eopf_stac_xarray_tutorial.html#establish-a-connection-to-the-eopf-zarr-stac-catalog",
    "title": "From STAC to Data: Accessing EOPF Zarr with xarray",
    "section": "Establish a connection to the EOPF Zarr STAC Catalog",
    "text": "Establish a connection to the EOPF Zarr STAC Catalog\nOur first step is to a connection to the EOPF Zarr STAC Catalog. This involves defining the url of the STAC endpoint. See the previous section for a more detailed explanation how to retrieve the end point url.\nThrough the Client.open() function, we can establish the connection to the EOPF Zarr STAC catalog by providing the specific url.\n\nmax_description_length = 100\n\neopf_stac_api_root_endpoint = \"https://stac.core.eopf.eodc.eu/\" #root starting point\neopf_catalog = Client.open(url=eopf_stac_api_root_endpoint)\n# eopf_catalog  #print to have an interative visualisation",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>From STAC to Data: Accessing EOPF Zarr with xarray</span>"
    ]
  },
  {
    "objectID": "34_eopf_stac_xarray_tutorial.html#filtering-for-items-of-interest",
    "href": "34_eopf_stac_xarray_tutorial.html#filtering-for-items-of-interest",
    "title": "From STAC to Data: Accessing EOPF Zarr with xarray",
    "section": "Filtering for items of interest",
    "text": "Filtering for items of interest\nFor this tutorial, we will focus on the Sentinel-2 L2A Collection. The EOPF STAC Catalog corresponding id is: sentinel-2-l2a.\nAs we are interested in retrieving and exploring an Item from the collection, we will focus again over the Innsbruck area we have defined in the previous tutorial.\n\ninnsbruck_s2 = eopf_catalog.search( # searching in the Catalog\n    collections= 'sentinel-2-l2a', # interest Collection,\n    bbox=(11.124756, 47.311058, # AOI extent\n          11.459839,47.463624),\n    datetime='2020-05-01T00:00:00Z/2025-05-31T23:59:59.999999Z' # interest period\n)\n\ncombined_ins =list_found_elements(innsbruck_s2)\n\nprint(\"Search Results:\")\nprint('Total Items Found for Sentinel-2 L-2A over Innsbruck:  ',len(combined_ins[0]))\n\nSearch Results:\nTotal Items Found for Sentinel-2 L-2A over Innsbruck:   27\n\n\nLet us now select the first Item in the list of 27 Items.\n\nfirst_item_id=combined_ins[0][0]\nprint(first_item_id)\n\nS2B_MSIL2A_20250530T101559_N0511_R065_T32TPT_20250530T130924\n\n\nIn a next step, we retrieve the url of the cloud location for the specific item. We will need the url to access and load the selected Item with the help of xarray.\n\nc_sentinel2 = eopf_catalog.get_collection('sentinel-2-l2a')\n#Choosing the first item available to be opened:\nitem= c_sentinel2.get_item(id=first_item_id)\nitem_assets = item.get_assets(media_type=MediaType.ZARR)\n\ncloud_storage = item_assets['product'].href\n\nprint('Item cloud storage URL for retrieval:',cloud_storage)\n\nItem cloud storage URL for retrieval: https://objects.eodc.eu:443/e05ab01a9d56408d82ac32d69a5aae2a:202505-s02msil2a/30/products/cpm_v256/S2B_MSIL2A_20250530T101559_N0511_R065_T32TPT_20250530T130924.zarr",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>From STAC to Data: Accessing EOPF Zarr with xarray</span>"
    ]
  },
  {
    "objectID": "34_eopf_stac_xarray_tutorial.html#examining-dataset-structure",
    "href": "34_eopf_stac_xarray_tutorial.html#examining-dataset-structure",
    "title": "From STAC to Data: Accessing EOPF Zarr with xarray",
    "section": "Examining Dataset Structure",
    "text": "Examining Dataset Structure\nIn the following step, we open the cloud-optimised Zarr dataset using xarray.open_datatree supported by the xarray-eopf extension.\nThe subsequent loop then prints out all the available groups within the opened DataTree, providing a comprehensive overview of the hierarchical structure of the EOPF Zarr products.\n\ndt = xr.open_datatree(\n    cloud_storage,        # the cloud storage url from the Item we are interested in\n    engine=\"eopf-zarr\",   # xarray-eopf defined engine \n    op_mode=\"native\",     # visualisation mode\n    chunks={})            # default eopf chunking size\n\nfor dt_group in sorted(dt.groups):\n    print(\"DataTree group {group_name}\".format(group_name=dt_group)) # getting the available groups\n\nDataTree group /\nDataTree group /conditions\nDataTree group /conditions/geometry\nDataTree group /conditions/mask\nDataTree group /conditions/mask/detector_footprint\nDataTree group /conditions/mask/detector_footprint/r10m\nDataTree group /conditions/mask/detector_footprint/r20m\nDataTree group /conditions/mask/detector_footprint/r60m\nDataTree group /conditions/mask/l1c_classification\nDataTree group /conditions/mask/l1c_classification/r60m\nDataTree group /conditions/mask/l2a_classification\nDataTree group /conditions/mask/l2a_classification/r20m\nDataTree group /conditions/mask/l2a_classification/r60m\nDataTree group /conditions/meteorology\nDataTree group /conditions/meteorology/cams\nDataTree group /conditions/meteorology/ecmwf\nDataTree group /measurements\nDataTree group /measurements/reflectance\nDataTree group /measurements/reflectance/r10m\nDataTree group /measurements/reflectance/r20m\nDataTree group /measurements/reflectance/r60m\nDataTree group /quality\nDataTree group /quality/atmosphere\nDataTree group /quality/atmosphere/r10m\nDataTree group /quality/atmosphere/r20m\nDataTree group /quality/atmosphere/r60m\nDataTree group /quality/l2a_quicklook\nDataTree group /quality/l2a_quicklook/r10m\nDataTree group /quality/l2a_quicklook/r20m\nDataTree group /quality/l2a_quicklook/r60m\nDataTree group /quality/mask\nDataTree group /quality/mask/r10m\nDataTree group /quality/mask/r20m\nDataTree group /quality/mask/r60m\nDataTree group /quality/probability\nDataTree group /quality/probability/r20m",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>From STAC to Data: Accessing EOPF Zarr with xarray</span>"
    ]
  },
  {
    "objectID": "34_eopf_stac_xarray_tutorial.html#root-dataset-metadata",
    "href": "34_eopf_stac_xarray_tutorial.html#root-dataset-metadata",
    "title": "From STAC to Data: Accessing EOPF Zarr with xarray",
    "section": "Root Dataset Metadata",
    "text": "Root Dataset Metadata\nWe specifically look for groups containing data variables under /measurements/reflectance/r20m (which corresponds to Sentinel-2 bands at 20m resolution). The output provides key information about the selected group, including its dimensions, available data variables (the different spectral bands), and coordinates.\n\n# Get /measurements/reflectance/r20m group\ngroups = list(dt.groups)\ninteresting_groups = [\n    group for group in groups if group.startswith('/measurements/reflectance/r20m')\n    and dt[group].ds.data_vars\n]\nprint(f\"\\n🔍 Searching for groups with data variables in '/measurements/reflectance/r20m'...\")\n\n\n🔍 Searching for groups with data variables in '/measurements/reflectance/r20m'...\n\n\n\nif interesting_groups:\n    sample_group = interesting_groups[0]\n    group_ds = dt[sample_group].ds\n    \n    print(f\"Group '{sample_group}' Information\")\n    print(\"=\" * 50)\n    print(f\"Dimensions: {dict(group_ds.dims)}\")\n    print(f\"Data Variables: {list(group_ds.data_vars.keys())}\")\n    print(f\"Coordinates: {list(group_ds.coords.keys())}\")\n\nelse:\n    print(\"No groups with data variables found in the first 5 groups.\")\n\nGroup '/measurements/reflectance/r20m' Information\n==================================================\nDimensions: {'y': 5490, 'x': 5490}\nData Variables: ['b01', 'b02', 'b03', 'b04', 'b05', 'b06', 'b07', 'b11', 'b12', 'b8a']\nCoordinates: ['x', 'y']\n\n\n/tmp/ipykernel_301242/1451209294.py:7: FutureWarning: The return type of `Dataset.dims` will be changed to return a set of dimension names in future, in order to be more consistent with `DataArray.dims`. To access a mapping from dimension names to lengths, please use `Dataset.sizes`.\n  print(f\"Dimensions: {dict(group_ds.dims)}\")\n\n\nIn a next step, we inspect the attributes of the root dataset within the DataTree. Attributes often contain important high-level metadata about the entire product, such as processing details, STAC discovery information, and more. We print the first few attributes to get an idea of the available metadata.\n\n# Examine the root dataset\nroot_dataset = dt.ds\n\nprint(\"Root Dataset Metadata\")\n\nif root_dataset.attrs:\n    print(f\"\\nAttributes (first 3):\")\n    for key, value in list(root_dataset.attrs.items())[:3]:\n        print(f\"   {key}: {str(value)[:80]}{'...' if len(str(value)) &gt; 80 else ''}\")\n\nRoot Dataset Metadata\n\nAttributes (first 3):\n   other_metadata: {'AOT_retrieval_model': 'SEN2COR_DDV', 'L0_ancillary_data_quality': '4', 'L0_eph...\n   stac_discovery: {'assets': {'analytic': {'eo:bands': [{'center_wavelength': 0.4423, 'common_name...",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>From STAC to Data: Accessing EOPF Zarr with xarray</span>"
    ]
  },
  {
    "objectID": "34_eopf_stac_xarray_tutorial.html#visualising-the-rgb-quicklook-composite",
    "href": "34_eopf_stac_xarray_tutorial.html#visualising-the-rgb-quicklook-composite",
    "title": "From STAC to Data: Accessing EOPF Zarr with xarray",
    "section": "Visualising the RGB quicklook composite",
    "text": "Visualising the RGB quicklook composite\nEOPF Zarr Assets include a quick-look RGB composite, which we now want to open and visuliase. We open the Zarr dataset again, but this time, we specifically target the quality/l2a_quicklook/r20m group and its variables.\nThis group typically contains a true colour (RGB) quick-look composite, which is a readily viewable representation of the satellite image.\nWe use xr.open_dataset() and specify the following set of arguments in order to load the quick-look.\n\n## Visualising the RGB quicklook composite:\nds = xr.open_dataset(\n    cloud_storage,        # the cloud storage url from the Item we are interested in\n    engine=\"eopf-zarr\",   # xarray-eopf defined engine \n    op_mode=\"native\",     # visualisation mode\n    chunks={},            # default eopf chunking size\n    group_sep=\"/\",\n    variables=\"quality/l2a_quicklook/r20m/*\",\n)\n\nAs soon as we loaded it, we can create a simple plot with imshow() to see the quick-look.\n\nds[\"quality/l2a_quicklook/r20m/tci\"].plot.imshow()\nplt.title('RGB Quicklook')\nplt.xlabel('X-coordinate')\nplt.ylabel('Y-coordinate')\nplt.grid(False) # Turn off grid for image plots\nplt.axis('tight') # Ensure axes fit the data tightly",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>From STAC to Data: Accessing EOPF Zarr with xarray</span>"
    ]
  },
  {
    "objectID": "34_eopf_stac_xarray_tutorial.html#simple-data-analysis-calculating-ndvi",
    "href": "34_eopf_stac_xarray_tutorial.html#simple-data-analysis-calculating-ndvi",
    "title": "From STAC to Data: Accessing EOPF Zarr with xarray",
    "section": "Simple Data Analysis: Calculating NDVI",
    "text": "Simple Data Analysis: Calculating NDVI\nLet us now do a simple analysis with the data from the EOPF Zarr STAC Catalog. Let us calculate the Normalized Difference Vegetation Index (NDVI).\nFirst, we open the .zarr dataset specifically for the red (B04) and Near-Infrared (B08) bands, which are crucial for the calculation of the NDVI. We also specify resolution=20 to ensure we are working with the 20-meter resolution bands.\n\nred_nir = xr.open_dataset(\n    cloud_storage,\n    engine=\"eopf-zarr\",\n    chunks={},\n    spline_orders=0,\n    variables=['b04', 'b08'],\n    resolution= 60,\n)\n\nIn a next step, we cast the red (B04) and Near-Infrared (B08) bands to floating-point numbers. This is important for accurate mathematical operations, which we will conduct in the next cell.\n\nred_f = red_nir.b04.astype(float)\nnir_f = red_nir.b08.astype(float)\n\nNow, we perform the initial steps for NDVI calculation: - sum_bands: Calculates the sum of the Near-Infrared and Red bands. - diff_bands: Calculates the difference between the Near-Infrared and Red bands.\n\nsum_bands = nir_f + red_f\ndiff_bands = nir_f - red_f\nndvi = diff_bands / sum_bands\n\nTo prevent division by zero errors in areas where both red and NIR bands might be zero (e.g., water bodies or clouds), this line replaces any NaN values resulting from division by zero with the 0 value. This ensures a clean and robust NDVI product.\n\nndvi = ndvi.where(sum_bands != 0, 0)\n\nIn a final step, we can visualise the calculated NDVI.\n\nndvi.plot(cmap='RdYlGn', vmin=-1, vmax=1)\nplt.title('Normalized Difference Vegetation Index (NDVI)')\nplt.xlabel('X-coordinate')\nplt.ylabel('Y-coordinate')\nplt.grid(False) # Turn off grid for image plots\nplt.axis('tight') # Ensure axes fit the data tightly\n\n# Display the plot\nplt.show()",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>From STAC to Data: Accessing EOPF Zarr with xarray</span>"
    ]
  },
  {
    "objectID": "34_eopf_stac_xarray_tutorial.html#now-it-is-your-turn",
    "href": "34_eopf_stac_xarray_tutorial.html#now-it-is-your-turn",
    "title": "From STAC to Data: Accessing EOPF Zarr with xarray",
    "section": "💪 Now it is your turn",
    "text": "💪 Now it is your turn\nWith the foundations learned so far, you are now equipped to access products from the EOPF Zarr STAC catalog. These are your tasks:\n\nTask 1: Explore five additional Sentinel-2 Items for Innsbruck\nReplicate the RGB quick-look and have an overview of the spatial changes.\n\n\nTask 2: Calculate NDVI\nReplicate the NDVI calculation for the additional Innsbruck items.\n\n\nTask 3: Applying more advanced analysis techniques\nThe EOPF STAC Catalog offers a wealth of data beyond Sentinel-2. Replicate the search and data access for data from other collections.",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>From STAC to Data: Accessing EOPF Zarr with xarray</span>"
    ]
  },
  {
    "objectID": "34_eopf_stac_xarray_tutorial.html#conclusion",
    "href": "34_eopf_stac_xarray_tutorial.html#conclusion",
    "title": "From STAC to Data: Accessing EOPF Zarr with xarray",
    "section": "Conclusion",
    "text": "Conclusion\nIn this section we established a connection to the EOPF Sentinel Zarr Sample Service STAC Catalog and directly accessed an EOPF Zarr item with xarray. In the tutorial you are guided through the process of opening hierarchical EOPF Zarr products using xarray’s DataTree, a library designed for accessing complex hierarchical data structures.",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>From STAC to Data: Accessing EOPF Zarr with xarray</span>"
    ]
  },
  {
    "objectID": "34_eopf_stac_xarray_tutorial.html#whats-next",
    "href": "34_eopf_stac_xarray_tutorial.html#whats-next",
    "title": "From STAC to Data: Accessing EOPF Zarr with xarray",
    "section": "What’s next?",
    "text": "What’s next?\nThis online resource is under active development. So stay tuned for regular updates.",
    "crumbs": [
      "**EOPF and STAC**",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>From STAC to Data: Accessing EOPF Zarr with xarray</span>"
    ]
  },
  {
    "objectID": "glossary.html",
    "href": "glossary.html",
    "title": "Glossary",
    "section": "",
    "text": "Here we introduce some helpful terms that are mentioned throughout the EOPF 101.\n\n\n\n\n\n\n\nAcronym\nDefinition\n\n\n\n\nEOPF\nEarth Observation Processing Framework\n\n\nCDSE\nCopernicus Data Space Ecosystem\n\n\nCMP\nCore Python Modules\n\n\nHEALPix\nHierarchical Equal Area isoLatitude Pixelation\n\n\nGDR\nGround Range Detected\n\n\nSLC\nSingle Look Complex\n\n\nNRB\nNormalized Radar Backscatter\n\n\nSAFE\nStandard Archive Format for Europe\n\n\nSTAC\nSpatio Temporal Asset Catalog\n\n\nCOG\nCloud Optimised GeoTIFF\n\n\nZarr\nCloud-optimised version for netCDF and HDF5 formats, specifically designed for storing and accessing large n-dimensional arrays",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>**Glossary**</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "The table below provides a categorized overview of key resources used during the development of the EOPF 101 book.\n\n\n\nCategory\nResource Title\nDescription & Context\nLink\n\n\n\n\nSentinel Mission & Product Specifications\nSentinel-1 Level 1 Product Specification\nDetailed specifications for Sentinel-1 Level 1 products.\nAvailable here\n\n\n\nSentinel-2 - MSI - Level 2A Products\nAuxiliary and data product specifications for Sentinel-2 MSI Level 2A products.\nAvailable here\n\n\n\nSentinel-3 – Documentation (via CDSE)\nComprehensive documentation for Sentinel-3 data products and mission.\nAvailable here\n\n\nEOPF Platform & Modules\nSupported Products Formats — EOPF - Core Python Modules\nGuide to the product formats supported by the Earth Observation Processing Framework’s (EOPF) Core Python Modules.\nAvailable here\n\n\n\nEOPF Sentinel Zarr Samples Service STAC Catalog\nA STAC (Spatio Temporal Asset Catalog) for accessing Sentinel Zarr samples hosted by EOPF.\nAvailable here\n\n\n\nEOPF Sentinel Zarr Samples\nDirect access to Sentinel data samples stored in Zarr format within the EOPF ecosystem.\nAvailable here\n\n\nData Formats & Standards\nZarr Documentation\nOfficial documentation for the Zarr format, a cloud-optimised standard for n-dimensional arrays.\nAvailable here\n\n\n\nIntroduction to the Zarr Format | Copernicus Marine Help Center\nAn introductory guide to the Zarr format, provided by the Copernicus Marine Help Center.\nAvailable here\n\n\n\nZarr + STAC\nArticle discussing the integration and benefits of combining Zarr data with STAC catalogs.\nAvailable here\n\n\n\nIs Zarr the new COG?\nAn insightful discussion comparing Zarr with Cloud Optimised GeoTIFF (COG) for cloud-native geospatial data.\nAvailable here\n\n\n\nAbout STAC\nGeneral information and principles behind the Spatio Temporal Asset Catalog (STAC) specification.\nAvailable here\n\n\nCloud-Native Geospatial Initiatives\nCloud-Native Geospatial Forum (CNG)\nThe official website for the Cloud-Native Geospatial Forum, promoting cloud-native approaches in geospatial.\nAvailable here",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>**References**</span>"
    ]
  }
]