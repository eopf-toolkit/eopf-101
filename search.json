[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ESA EOPF 101",
    "section": "",
    "text": "Welcome\nThis online book is the go-to resource to learn everything about the EOPF Sample Service by ESA.\nTo be continued…",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "1_about_eopf.html",
    "href": "1_about_eopf.html",
    "title": "Introduction to the EOPF",
    "section": "",
    "text": "What is the Earth Observation Processor Framework (EOPF)?\nThe Earth Observation Processor Framework (EOPF) is an initiative led by the European Space Agency (ESA) designed to modernise and harmonise data from the Copernicus Sentinel Missions.\nWith the upcoming Copernicus Expansion missions in 2028, the amount of data produced daily will significantly increase. EOPF is ESA’s solution to organise Sentinel data in a way that works seamlessly with modern cloud technology. This will make it easier to find, access, and process the information you need. The new approach provides user-friendly access, simplifies maintenance, and helps keep costs down, guaranteeing reliable access to Sentinel data in the long run.\nThe Sentinel-1, Sentinel-2, and Sentinel-3 missions are the first to be updated with this new system.\n\n\nThe EOPF Data Model\nThe EOPF data model has been defined by following a set of principles:\n\nOpen standards: Following common and community approved data standards ensure sustainability and user uptake.\nInteroperability: Harmonised with a clear and organised structure that describes the data itself.\nCloud optimisation: Designed for efficient access and handling in cloud environments.\nConversion flexibility: Providing tools to adjust the data for different applications.\n\nUnder EOPF, there are four key areas of activities: (i) EOPF product structure, (ii) EOPF metadata structure, (iii) EOPF encoding structure and (iv) EOPF Processor Framework\n\nEOPF product structure\nAs part of the EOPF, ESA is actively working on a common data structure for Sentinel data products, with the aim to define a common meta-model that can be used across all Sentinel and other EO missions. This approach ensures that data from several missions is consistent.\nThe EOPF product structure consists of the following components:\n\nMeasurements: The actual sensor readings (like how much light is reflected or the temperature), at different levels of detail.\nQuality indicators: Details that help understand how reliable the measurements are.\nConditions: Information about the environment or technical aspects when the data was collected.\nAttributes: Global metadata, such as when it was acquired and the sensor’s orbit.\n\n\n\n\nEOPF product structure\n\n\n\n\n\n\n\n\nNote\n\n\n\nLearn more about the EOPF Zarr product structure here.\n\n\n\n\nEOPF metadata structure\nMetadata provide all relevant information required to uniquely describing each Sentinel product. The EOPF metadata structure will be organised into:\n\nDiscovery Metadata: Following the metadata structure defined by the SpatioTemporal Asset Catalogue (STAC), which helps to keep things consistent across different missions.\nProcessing History Metadata: keeping a record of how the data has been processed.\nOther Metadata: Information like the status of the sensor and details about the satellite’s orbit.\n\n\n\n\n\n\n\nNote\n\n\n\nEOPF and STAC: Learn more about EOPF and STAC here.\n\n\n\n\nEOPF encoding structure\nAn encoding structure can be seen as the specific method used to package and store data and its associated metadata in a digital format. Building on the consistent data structure and clear metadata, the new storage system must be capable of handling various aspects of current Sentinel data (such as manifest files and tile structures from the SAFE format) while remaining fully compatible with cloud environments.\nESA chose .zarr as encoding format as it allows for instant access to data, efficient processing of massive amounts of data, and seamless integration with other datasets. The EOPF Zarr data format allows you to work with data from multiple missions more effectively.\n\n\n\n\n\n\nNote\n\n\n\nLearn more about the EOPF Zarr format here. And learn more about cloud-optimised geospatial data formats in general in the Cloud-Optimised Geospatial Data Formats Guide\n\n\n\n\nEOPF processor framework\nThe way Sentinel data is processed is being updated to take advantage of modern cloud computing. This will make the processing faster and more efficient, while ensuring the scientific quality and accuracy of the Sentinel data remains the same.\n\n\n\n\n\n\nNote\n\n\n\nTo learn more about the EOPF processor framework, visit https://eopf.copernicus.eu/eopf/\n\n\n\n\n\nWhat’s next?\nIn the following chapters, we will introduce the datasets being made available under EOPF and will provide you practical examples to work with the new EOPF Zarr data format.",
    "crumbs": [
      "About EOPF",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to the EOPF</span>"
    ]
  },
  {
    "objectID": "1_about_cloudoptimized_formats.html",
    "href": "1_about_cloudoptimized_formats.html",
    "title": "About Cloud Optimised Formats",
    "section": "",
    "text": "Why do we need to cloud-optimise geospatial data formats?\nThe volume of EO data has grown exponentially in recent years. The Copernicus programme alone generates ~16TB daily from the Sentinel missions. Traditional file formats, like SAFE (where each file can be hundreds of megabytes), are optimised for efficient archiving and distributing data. This means that we often download the data from an entire overpass, even if we only need to access a small part of it, for example, if we want to do an analysis of the area of a single city over a decade.\nWith growing data volumes, this becomes a challenge. To picture the different nature of challenges we come across, let us compare a traditional local workflow with a cloud-based workflow:\n\nTraditional local workflow: When working locally, we download much more data than we need, and we are constrained by the compute and storage capacity of the local system. However, an advantage working locally is that data and compute are close together, meaning that there is not much delay in accessing the data.\nCloud-based workflow: Cloud environments overcome limitations local workflows have. A cloud environment offers limitless storage and compute capacity. On the contrary, data storage, compute, and you the destination are far apart. There is an additional time for data to travel between the storage location, processing resources and us. This time is referred to as data latency.\n\n\n\n\n\n\n\nNote\n\n\n\nData latency refers to the time it takes for data to be transmitted or processed from cloud storage to your computer. In local workflows, data latency is minimal, whereas in cloud-based workflows, data latency needs to be optimised.\n\n\nLocal workflows are similar to placing an order at the nearby pizzeria. It is quick since the ‘data’ (pizza) is easily accessible, but we can only choose from what they have on hand and their menu. The local alternatives limit our options. On the other hand, cloud-based workflow offers almost limitless choices and access to a wide range of speciality ingredients or distinctive styles.  This makes it similar to being able to order a pizza from any pizzeria on the globe. While we might have more options to choose from, the time between order and delivery can become a challenge.\nThe overall goal with cloud-based workflows is to minimise data latency as much as possible. This is why traditional data formats need to be cloud-optimised.\n\n\nCharacteristics of cloud-optimised formats\nCloud-optimised formats are optimised to minimise data latency. By allowing for an efficient retrieval of smaller, specific chunks of information rather than downloading an entire file. Accessing a smaller data subset also reduces the costs associated with data transfer and data processing.\nCloud-optimised geospatial data formats have the following characteristics:\n\nData is accessible over an HTTP protocol.\nRead-Oriented, as it supports partial and parallel reads.\nData is organised in internal groupings (such as chunks, tiles, shards) for efficient subsetting, distributed processing and data access in memory.\nMetadata can be accessed in one read.\n\n\n\n\n\n\n\nNote\n\n\n\nWhen accessing data over the internet (e.g., cloud storage), latency is high compared to local storage, so it is preferable to fetch lots of data in fewer reads.\n\n\n\n\nUnderstanding N-dimensional Arrays\nEarth observation data often consists of multiple dimensions - think of a satellite image series that has spatial dimensions (latitude, longitude), spectral bands, and time. This multi-dimensional nature requires specialized data structures and tools.\n\nThe xarray Data Model\nxarray provides a powerful data model for working with labeled multi-dimensional arrays. It introduces:\n\nDimensions: Named axes (e.g., latitude, longitude, time)\nCoordinates: Labels for points along dimensions\nVariables: N-dimensional arrays with corresponding dimensions\nAttributes: Metadata about the arrays\n\n\n\n\nxarray’s data model showing dimensions, coordinates, and variables\n\n\n\n\n\nCloud-Optimised Geospatial Data Formats\nFor satellite data, there are two main categories of cloud-optimised formats: 1. Raster Formats: Optimized for 2D image data (like Cloud-Optimised GeoTIFFs) 2. Multi-dimensional Array Formats: Designed for complex, n-dimensional data structures\n\nCloud-optimised GeoTIFF (COG)\nCOGs have widely been used as cloud-native format for satellite imagery and improve the standard GeoTIFF format by: - Organising data into tiles: Dividing the data into smaller, manageable squares (like 512x512 pixels). - Including lower-resolution previews: Having pre-generated, less detailed versions of the data. This allows for fast and efficient data visualisations.\nA key feature of COGs is the Internal File Directory (IFD), which acts like an internal index. This allows for retrieving only the parts of the data needed using simple web requests. For example, it is possible to access just the tiles covering Paris from a large Sentinel-2 image of Europe.\n\n\n\nCOG structure. Retrieved from CNG documentation\n\n\n\n\nMulti-dimensional Array Storage with Zarr\nWhile xarray provides the data model for working with n-dimensional arrays, Zarr provides the storage format. Zarr is designed specifically for storing and accessing large n-dimensional arrays in the cloud by:\n\nChunking: Breaking large arrays into smaller pieces that can be accessed independently\nCompression: Each chunk can be compressed individually for efficient storage\nHierarchical Organization: Arrays are organized in groups, similar to folders in a filesystem\nCloud-Native Access: Optimized for reading partial data over HTTP\nParallel I/O: Multiple chunks can be read or written simultaneously\nSelf-Description: Rich metadata is stored alongside the data using JSON\n\nThis makes Zarr particularly well-suited for cloud-based Earth observation data, where datasets often combine multiple dimensions like space, time, and spectral bands.\n\n\n\nZarr’s hierarchical organization showing stores, groups, arrays, and chunks\n\n\n\n\n\nWhen to use COGs versus Zarr?\nThe table below compares some features of COG and Zarr:\n\n\n\n\n\n\n\n\nFeature\nZarr\nCOG\n\n\n\n\nStructure\nMulti-file chunks\nSingle file\n\n\nAccess\nParallel\nSequential\n\n\nCompression\nDifferently per-chunk\nWhole-file\n\n\nScales\nMulti-scale in single file\nSeparate, pre-generated lower-resolution files\n\n\n\nBased on the structure and capabilities for each format, COGs are used when:\n\nyou work with two-dimensional raster data (like satelliteimages or elevation models)\nyou need to easily visualise or access specific geographic areas without loading the entire dataset.\ninteroperability with existing GIS software is important, as COG is a widely adopted standard.\n\nOn the other hand, Zarr is more often used when:\n\nyou deal with large, multi-dimensional datasets that might be updated or modified.\nyou performing complex analyses that involve accessing different parts of the data in parallel.\nan efficient handling of different resolutions or variables within a single dataset is required.\n\n\n\n\n\n\n\nNote\n\n\n\nZarr vs COG: Want to learn more about the differences and similarities of COG and Zarr? Then we recommend the following blogpost by Julia Signell and Jarrett Keifer from Element84 where they discuss “Is Zarr the new COG?”\n\n\n\n\nWhat’s next?\nNow that we have an idea of the available cloud-optimised formats for satellite imagery and what cloud-optimised means, we will explore the EOPF data products that will become available as part of the EOPF Zarr Sample Service.",
    "crumbs": [
      "About EOPF",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>About Cloud Optimised Formats</span>"
    ]
  },
  {
    "objectID": "1_overview_eopf_datasets.html",
    "href": "1_overview_eopf_datasets.html",
    "title": "The EOPF Available Datasets",
    "section": "",
    "text": "Re-engineered datasets as part of ESA’s EOPF activity are available for exploration via the EOPF Sentinel Sample Service’s STAC Catalog.\nAt the moment data from Sentinel-1, Sentinel-2 and Sentinel-3 missions are being re-processed and made available.\n\n\n\n\n\n\nImportant\n\n\n\nThe re-processing from the Sentinel Missions is an ongoing activity as part of the EOPF Sentinel Zarr Sample Service. This page and our tutorials will continuously be updated as soon as new data products are available.\n\n\nAn overview of the datasets that are being re-engineered for different processing levels is given below.\n\nAvailable EOPF products\n\nSentinel-1\nSentinel-1 is a radar imaging mission that is composed of a constellation of two polar-orbiting satellites providing continuous all-weather, day and night imagery.\n\n\n\nProduct\nInstrument\nDescription\nAvailable at\n\n\n\n\nLevel-1 GRD\nGround Range Detected\nThe Sentinel-1 Level-1 GDR products consist of focused SAR data that has been detected, multi-looked and projected to ground range using the Earth ellipsoid model WGS84.\nthis link\n\n\nLevel-1 SLC\nSingle Look Complex (\nThe Sentinel-1 Level-1 SLC products consist of focused SAR data, geo-referenced using orbit and attitude data from the satellite, and provided in slant-range geometry.\nthis link\n\n\nLevel-2 OCN\nOcean\nThe Sentinel-1 Level-2 OCN products for wind, wave and currents applications may contain the following geophysical components derived from the SAR data: Ocean Wind field (OWI), Ocean Swell spectra (OSW), Surface Radial Velocity (RVL).\nthis link\n\n\n\n\n\nSentinel-2\nSentinel-2 acquires optical imagery at high spatial resolution (10m to 60m) over land and coastal waters. The mission supports applications such as agricultural monitoring, emergency management, land cover classifications, and water quality.\n\n\n\nProduct\nInstrument\nDescription\nAvailable at\n\n\n\n\nLevel-1C\nMulti-Spectral Instrument\nThe Sentinel-2 Level-1C product is composed of 110x110 km2 tiles (ortho-images in UTM/WGS84 projection). Earth is subdivided on a predefined set of tiles, defined in UTM/WGS84 projection and using a 100 km step.\nthis link\n\n\nLevel-2A\nMulti-Spectral Instrument\nThe Sentinel-2 Level-2A Collection 1 product provides orthorectified Surface Reflectance (Bottom-Of-Atmosphere: BOA), with sub-pixel multispectral and multitemporal registration accuracy.\nthis link\n\n\n\n\n\nSentinel-3\nSentinel-3 is a mission that regularly measures our Earth’s oceans, land, rivers, lakes, ice on land, sea ice, and the atmosphere. Its goal is to keep track of and help us understand how these large parts of our planet change over long periods.\n\nOcean and Land Colour Instrument\n\n\n\nProduct\nProduct\nDescription\nAvailable at\n\n\n\n\nLevel-1 EFR\nEarth Full Resolution\nProvides TOA radiances at full resolution for each pixel in the instrument grid, each view and each OLCI channel, plus annotation data associated to OLCI pixels.\nthis link\n\n\nLevel-1 ERR\nEarth Reduced Resolution\nThe Sentinel-3 OLCI L1 ERR product provides TOA radiances at reduced resolution for each pixel in the instrument grid, each view and each OLCI channel, plus annotation data associated to OLCI pixels.\nthis link\n\n\nLevel-2 LFR\nLand Full Resolution\nThe Sentinel-3 OLCI L2 LFR product provides land and atmospheric geophysical parameters computed for full resolution.\nthis link\n\n\nLevel-2 LRR\nLand Reduced Resolution\nThe Sentinel-3 OLCI L2 LRR product provides land and atmospheric geophysical parameters computed for reduced resolution.\nthis link\n\n\n\n\n\nSea and Land Surface Temperature Radiometer\n\n\n\nProduct\nData\nDescription\nAvailable at\n\n\n\n\nLevel-1 RBT\nRadiance Brightness Temperature\nThe Sentinel-3 SLSTR Level-1B RBT product provides radiances and brightness temperatures for each pixel in a regular image grid for each view and SLSTR channel.\nthis link\n\n\nLevel-2 LST\nLST: Land Surface Temperature\nThe Sentinel-3 SLSTR Level-2 LST product provides land surface temperature.\nthis link\n\n\n\n\n\n\n\nWhat’s next?\nIn the following chapter, we dive deeper into the advantages of the Zarr data format and we start with practically working with EOPF Zarr datasets.",
    "crumbs": [
      "About EOPF",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The EOPF Available Datasets</span>"
    ]
  },
  {
    "objectID": "2_what_is_zarr.html",
    "href": "2_what_is_zarr.html",
    "title": "Overview of the EOPF Zarr format",
    "section": "",
    "text": "What Is Zarr?\nZarr is an open-source, cloud-native protocol for storing multi-dimensional arrays. It is specifically desgined to work well with cloud storage and larger-scale computing systems and can be seen as a cloud-native alternative to older formats like HDF5 or NetCDF.\nKey advantage to traditional formats is that the Zarr specification stores large multi-dimensional arrays in chunks, which are smaller pieces of the larger array. Chunks can be accessed individually or multiple chunks can be read and written in parallel, making data access highly efficient.\nZarr works across different storage systems, including local file systems, cloud object storage as well as distributed file systems; offering a greater flexibility compared to traditional file formats.\nIn addition, Zarr embeds metadata directly alongside the data. This makes Zarr self-descriptive, as each data array contains descriptive information about itself, such as data type, dimensions or additional attributes.\n\n\n\n\n\n\nNote\n\n\n\nPro tip: Learn more about Zarr in the official Zarr Documentation and the Zarr V3 storage specification\n\n\n\n\nComponents of Zarr\nZarr is organised in a human-readable, hierarchical structure using simple JSON metadata files and is composed of groups and stores, chunks and metadata:\n\nGroups and Stores\nGroups and stores are concepts that allow Zarr to differentiate between (i) where the data is stored (stores) and (ii) how it is organised (groups). A group is a container for logically organising the data, similar to folders in a file system. A store defines where the data is stored; it can be e.g. a bucket in the cloud or a directory on a disk.\n\n\nChunks\nZarr divides arrays into smaller, independent pieces (chunks). Through chunking it is possible to retrieve and process specific areas without loading the complete dataset. Its organisation into chunks is the main reason Zarr’s high performance. Chunks are saved as binary files inside a /c directory and are further organised through nested folder paths based on their index, e.g. c/0/0/0 for the chunk position [0,0.0].\n\n\nMetadata\nZarr uses descriptive metadata to describe the individual arrays but also the full hierarchy of the dataset. Metadata are stored in zarr.json files and are available on the array, group and store level. This structured metadata approach makes Zarr datasets self-descriptive and easy to navigate.\nThe graphic below shows an overview of all relevant Zarr components.\n\n\n\nZarr conceptual structure\n\n\n\n\n\nZarr EOPF Format Structure\nThe ESA Copernicus Earth Observation Processor Framework defines .zarr as the encoding format for the EOPF catalogue. The Zarr encoding is well aligned with ESA’s objective of enhancing the accessibility of Sentinel Data by modernising the previous .SAFE encoding into a flexible, cloud-native structure. The cloud-native nature of zarr is expected to broaden the applications of the Sentinel data within the geospatial community while maintaining data quality and established algorithms.\nEOPF Zarr products contain of four main groups:\n\n\n\n\n\n\n\nGroup\nContents\n\n\n\n\nAttributes\nSTAC format metadata for the .zarr element\n\n\nMeasurements\nMain retrieved variables\n\n\nConditions\nMeasurement context (geometric angles, meteorological/instrumental data)\n\n\nQuality\nFlags and quality information for measurement filtering\n\n\n\nLet us imagine a Sentinel-2 L2A tile. The tile has dimensions of approximately 10,980 by 10,980 pixels, and include 12 spectral bands (B01 to B12, excluding B10) at different resolutions, plus additional data arrays like a Scene Classification Map (SCL) and an Atmospheric Optical Thickness (AOT) array.\nFor efficient handling, the data is divided into 1024 by 1024-pixel chunks. This chunking strategy allows for optimal performance when reading specific spatial regions of interest.\nFollowing the defined EOPF Zarr product structure, a Sentinel-2 L2A .zarr file is organized as follows:\n\nUnder attributes, you’ll find:\n\nProcessing history metadata\nChunking configuration\nGlobal metadata (acquisition time, sensing time, etc.)\nProduct-specific metadata\n\nUnder measurements, the spectral bands are stored at their native resolutions:\n\n10m resolution (r10):\n\nB02 (Blue, 490nm)\nB03 (Green, 560nm)\nB04 (Red, 665nm)\nB08 (NIR, 842nm)\n\n20m resolution (r20):\n\nB05 (Red Edge 1, 705nm)\nB06 (Red Edge 2, 740nm)\nB07 (Red Edge 3, 783nm)\nB8A (Narrow NIR, 865nm)\nB11 (SWIR 1, 1610nm)\nB12 (SWIR 2, 2190nm)\n\n60m resolution (r60):\n\nB01 (Coastal aerosol, 443nm)\nB09 (Water vapour, 945nm)\n\n\nUnder quality, you’ll find quality indicators including:\n\nScene Classification Layer (SCL)\nQuality flags for each band\nDetector footprint\nDefective pixels masks\n\nUnder conditions, there’s measurement context information:\n\nSun angles (zenith, azimuth)\nViewing angles\nMean solar irradiance\nAtmospheric parameters like:\n\nAerosol Optical Thickness (AOT)\nWater Vapor (WV)\nCloud and snow probability\n\n\n\n\n\n\nOverview of EOPF Zarr product structure on the example of Sentinel-2 L2A\n\n\nThis EOPF Zarr organisation for Sentinel-2 L2A data allows for efficient access to individual bands or specific spatial regions without loading the entire dataset, making it ideal for large-scale geospatial analysis. It also ensures all relevant metadata is co-located with the data it describes, enhancing data discoverability and usability.\n\n\n\n\n\n\nNote\n\n\n\nZarr Deep Dive: Dive deeper into the benefits of Zarr in a blogpost by Lindsey Nield from the Earthmover team: Fundamentals: What is Zarr? A Cloud-Native Format for Tensor Data.\n\n\n\n\nWhat’s next?",
    "crumbs": [
      "About Zarr",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Overview of the EOPF Zarr format</span>"
    ]
  },
  {
    "objectID": "glossary.html",
    "href": "glossary.html",
    "title": "Glossary",
    "section": "",
    "text": "Here we introduce some important terms that are mentioned throughout the present book.\nEOPF: Earth Observation Processing Framework\nCDSE: Copernicus Data Space Ecosystem\nCMP: Core Python Modules\nHEALPix: Hierarchical Equal Area isoLatitude Pixelation.\nGDR: Ground Range Detected\nSLC: Singlme Look Complex\nNRB: Normalized Radar Backscatter\nSAFE: Standard Archive Format for Europe\nSTAC: Spatio Temporal Asset Catalog",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Glossary</span>"
    ]
  }
]