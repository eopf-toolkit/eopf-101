---
title: "Zarr Chunking Introduction"
format: html
---

Chunking is the secret sauce that makes Zarr format incredibly efficient for Earth Observation data processing. **Understanding chunking transforms how you work with massive satellite datasets** — turning memory-crushing, slow operations into fast, scalable analysis workflows. This tutorial takes you from chunking basics to advanced optimization strategies specifically tailored for EOPF (Earth Observation Processing Framework) datasets.

## Understanding the fundamentals of Zarr chunking

Zarr revolutionizes how we store and access large multidimensional arrays by breaking them into smaller, manageable pieces called **chunks**. Think of chunks as rectangular tiles that together compose your complete dataset, but with a crucial difference: you can access and process these tiles independently.

### What chunks actually are

<div style="float: left; margin-right: 25px; margin-bottom: 25px;">
<img src="../../img/zarr_chunk_data.png" style="width: 200px; align: center;" alt="Zarr chunked data">
<figcaption>Zarr Chunked Data. Source [earthmover.io](https://earthmover.io/blog/what-is-zarr)</figcaption>
</div>

A chunk is Zarr's fundamental storage unit — an equally-sized block of array data that gets compressed and stored as a separate object. When you have a massive 10,000 × 10,000 pixel satellite image, Zarr might divide it into 100 chunks of 1,000 × 1,000 pixels each. Each chunk becomes a separate compressed file or object in your storage system.

<br/>
<br/>
<br/>
<br/>

### A simple chunking example

Let's explore chunking with a simple 2D raster dataset example. Imagine we have a 6×6 grid representing temperature data:

```python
import numpy as np

# Create a 6x6 temperature grid (in Celsius)
temperatures = np.array([
    [20, 21, 22, 23, 24, 25],
    [21, 22, 23, 24, 25, 26],
    [22, 23, 24, 25, 26, 27],
    [23, 24, 25, 26, 27, 28],
    [24, 25, 26, 27, 28, 29],
    [25, 26, 27, 28, 29, 30]
])
```

This simple dataset can be chunked in different ways, each with its own advantages and tradeoffs:

**1×1 Chunks (Single Cell)**

::: {.columns}
::: {.column width="25%"}
```
┌─┬─┬─┬─┬─┬─┐
│1│1│1│1│1│1│
├─┼─┼─┼─┼─┼─┤
│1│1│1│1│1│1│
├─┼─┼─┼─┼─┼─┤
│1│1│1│1│1│1│
├─┼─┼─┼─┼─┼─┤
│1│1│1│1│1│1│
├─┼─┼─┼─┼─┼─┤
│1│1│1│1│1│1│
├─┼─┼─┼─┼─┼─┤
│1│1│1│1│1│1│
└─┴─┴─┴─┴─┴─┘
```
:::
::: {.column width="75%"}
- Each cell is its own chunk
- Maximum flexibility but high overhead
- 36 total chunks
- Good for random access to individual cells
- Poor for operations that need adjacent cells
:::
:::

**2×2 Chunks**

::: {.columns}
::: {.column width="25%"}
```
┌───┬───┬───┐
│ 4 │ 4 │ 4 │
│   │   │   │
├───┼───┼───┤
│ 4 │ 4 │ 4 │
│   │   │   │
├───┼───┼───┤
│ 4 │ 4 │ 4 │
│   │   │   │
└───┴───┴───┘
```
:::
::: {.column width="75%"}
- Each chunk contains 4 cells
- Balanced approach
- 9 total chunks
- Good for small region operations
- Reasonable compression potential
:::
:::

**3×3 Chunks**

::: {.columns}
::: {.column width="25%"}
```
┌─────┬─────┐
│     │     │
│  9  │  9  │
│     │     │
├─────┼─────┤
│     │     │
│  9  │  9  │
│     │     │
└─────┴─────┘
```
:::
::: {.column width="75%"}
- Each chunk contains 9 cells
- More efficient storage
- 4 total chunks
- Better compression
- Less granular access
:::
:::

The choice between these chunking strategies depends on your use case:

- If you frequently need to update individual temperature values, 1×1 chunks might be best
- If you typically analyze small regions (e.g., 2×2 areas), the 2×2 chunking is ideal
- If you usually process larger regions and want better compression, 3×3 chunks work well

Here's how to create this dataset with different chunking strategies using Zarr:

```python
import zarr

print(f"Array shape: {temperatures.shape}")

# Create the same dataset with different chunk sizes
temps_1x1 = zarr.array(temperatures, chunks=(1, 1))  # Single cell chunks
temps_2x2 = zarr.array(temperatures, chunks=(2, 2))  # 2x2 chunks
temps_3x3 = zarr.array(temperatures, chunks=(3, 3))  # 3x3 chunks

print(f"1x1 chunks: {temps_1x1.chunks}, Total chunks: {temps_1x1.nchunks}")
print(f"2x2 chunks: {temps_2x2.chunks}, Total chunks: {temps_2x2.nchunks}")
print(f"3x3 chunks: {temps_3x3.chunks}, Total chunks: {temps_3x3.nchunks}")
```

The magic happens in how chunks are stored and accessed. Each chunk gets its own storage key (like `c/0/1` for the chunk at row 0, column 1 of the chunk grid) and is compressed individually using algorithms like Blosc or Zstandard. This design enables several powerful capabilities that traditional array storage can't match.

### Why chunks transform performance

Chunking addresses three critical performance bottlenecks in large-scale data processing:

**Memory efficiency**: Instead of loading entire datasets into RAM, you only load the chunks containing data you actually need. This lets you work with datasets much larger than your available memory — a 100 GB satellite time series can be processed on a machine with just 8 GB of RAM.

**I/O optimization**: Chunking minimizes data transfer by reading only relevant sections. When you need data from one geographic region, Zarr loads only those chunks covering that area. For cloud storage, this translates to fewer, more efficient HTTP range requests instead of downloading massive files.

**Parallel processing**: Different chunks can be processed simultaneously by multiple CPU cores or distributed workers. This transforms compute-intensive operations from sequential bottlenecks into scalable parallel workflows.

Research demonstrates that properly chunked Zarr stores can achieve **5-20 GB/s sustained read speeds** from cloud storage with appropriate parallelization — performance impossible with traditional monolithic file formats.

## How EOPF structures Earth Observation datasets

::: {.callout-tip}
If you have not already, please review the [Overview of EOPF Zarr Products](../../13_overview_eopf_datasets.qmd) to better understand the EOPF Dataset structure before diving deeper into chunking strategies.
:::

### Groups in the EOPF dataset structure relevant to chunking

#### Sentinel-2 datasets (L1C and L2A)

The "measurements" group in the EOPF Sentinel-2 dataset structure is particularly relevant for chunking. It contains subgroups such as "reflectance," which is further divided into "r10m," "r20m," and "r60m." These subgroups represent data at different spatial resolutions (10m, 20m, and 60m, respectively) and include variables like spectral bands (e.g., B02, B03, B04) stored as multidimensional arrays.

##### Chunking organization in "measurements"

- **r10m**: Variables like B02, B03, and B04 are chunked into 4096×4096 pixel blocks, optimizing for high-resolution spatial analysis.
- **r20m**: Variables such as B05, B06, and B07 use 4096×4096 pixel chunks, balancing storage efficiency and processing convenience for medium-resolution data.
- **r60m**: Variables like B01 and B09 are chunked into 1830×1830 pixel blocks, aligning with the coarser resolution requirements of atmospheric correction bands.

This chunking strategy ensures efficient access and processing across different resolutions, tailored to the specific needs of Earth Observation workflows.

### What makes EO data unique for chunking

Earth Observation datasets exhibit characteristics that significantly influence optimal chunking strategies:

**Multi-dimensional complexity**: Satellite data combines spatial dimensions (often tens of thousands of pixels per side), spectral dimensions (multiple wavelength bands), and temporal dimensions (time series spanning years or decades). Each dimension has different access patterns and computational requirements.

**Scale characteristics**: Modern satellites generate massive data volumes. Sentinel-2 alone produces approximately 1.6 TB per orbit, with the full archive exceeding 25 petabytes and growing rapidly. Processing workflows must handle this scale efficiently.

**Access patterns**: Unlike general-purpose arrays, EO data has predictable access patterns. Spatial analysis typically accesses rectangular geographic regions. Spectral analysis needs multiple bands for the same locations. Time series analysis follows individual pixels or regions through time.

**Heterogeneous resolutions**: Many instruments capture data at multiple spatial resolutions simultaneously. Sentinel-2's 10m, 20m, and 60m bands require coordinated chunking strategies that balance storage efficiency with processing convenience.

## Further Reading and Sources

### Official EOPF Documentation
- [Overview of the EOPF Zarr format](https://eopf-toolkit.github.io/eopf-101/21_what_is_zarr.html) - EOPF Toolkit's comprehensive guide to Zarr implementation
- [EOPF Storage Format Specification](https://cpm.pages.eopf.copernicus.eu/eopf-cpm/main/PSFD/4-storage-formats.html) - Technical specification for EOPF data storage
- [EOPF Overview - CSC Data Processors Re-engineering](https://eopf.copernicus.eu/eopf/) - Official Copernicus EOPF program overview

### Zarr Format Documentation
- [Zarr Tutorial](https://zarr.readthedocs.io/en/v1.1.0/tutorial.html) - Official Zarr documentation and tutorials
- [Optimizing Performance - Zarr Documentation](https://zarr.readthedocs.io/en/latest/user-guide/performance.html) - Performance optimization guide
- [Zarr - Official Project Site](https://zarr.dev/) - Main Zarr project website

### Cloud-Native Geospatial Resources
- [Cloud-Optimized Geospatial Formats Guide - Zarr](https://guide.cloudnativegeo.org/zarr/intro.html) - Cloud Native Geo's comprehensive Zarr guide
- [Zarr Takes Cloud-Native Geospatial by Storm](https://earthmover.io/blog/zarr-takes-cloud-native-geospatial-by-storm) - Earthmover's analysis of Zarr adoption

### Chunking Strategy Guides
- [Choosing Good Chunk Sizes in Dask](https://blog.dask.org/2021/11/02/choosing-dask-chunk-sizes) - Dask team's chunking recommendations
- [Optimization Practices - Chunking](https://esipfed.github.io/cloud-computing-cluster/optimization-practices.html) - ESIP Fed's chunking best practices

### Sentinel-2 Mission Documentation
- [Copernicus: Sentinel-2 - eoPortal](https://www.eoportal.org/satellite-missions/copernicus-sentinel-2) - Comprehensive mission overview
- [Sentinel-2 Products](https://sentiwiki.copernicus.eu/web/s2-products) - Official product specifications

### Research Papers and Technical Articles
- [Federated and Reusable Processing of Earth Observation Data](https://www.nature.com/articles/s41597-025-04513-y) - Nature Scientific Data paper
- [Optimal Chunking Strategies for Cloud-based Storage](https://www.researchgate.net/publication/359832694_Optimal_Chunking_Strategies_for_Cloud-based_Storage_of_Geospatial_Data_Using_Zarr) - Research on geospatial chunking

